// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

#include "textflag.h"

TEXT ·SwapInt32(SB),NOSPLIT|NOFRAME,$0-20
	JMP	·SwapUint32(SB)

TEXT ·SwapUint32(SB),NOSPLIT,$0-20
	MOVD	addr+0(FP), R27
	MOVUW	new+8(FP), R25
again:
	MEMBAR	$15
	MOVUW	(R27), R29
	CASW	(R27), R29, R25
	CMP	R25, R29
	BNEW	again
	MEMBAR	$15
	MOVUW	R29, old+16(FP)
	RET

TEXT ·SwapInt64(SB),NOSPLIT,$0-24
	JMP	·SwapUint64(SB)

TEXT ·SwapUint64(SB),NOSPLIT,$0-24
	MOVD	addr+0(FP), R27
	MOVD	new+8(FP), R25
again:
	MEMBAR	$15
	MOVD	(R27), R29
	CASD	(R27), R29, R25
	CMP	R25, R29
	BNED	again
	MEMBAR	$15
	MOVD	R29, old+16(FP)
	RET

TEXT ·SwapUintptr(SB),NOSPLIT|NOFRAME,$0-24
	JMP	·SwapUint64(SB)

TEXT ·CompareAndSwapInt32(SB),NOSPLIT|NOFRAME,$0-17
	JMP	·CompareAndSwapUint32(SB)

TEXT ·CompareAndSwapUint32(SB),NOSPLIT,$0-17
	MOVD	addr+0(FP), R25
	MOVUW	old+8(FP), R27
	MOVUW	new+12(FP), R29
	MEMBAR	$15
	CASW	(R25), R27, R29
	CMP	R29, R27
	MOVD	$0, R27
	MOVE	ICC, $1, R27
	MEMBAR	$15
	MOVB	R27, swapped+16(FP)
	RET

TEXT ·CompareAndSwapUintptr(SB),NOSPLIT|NOFRAME,$0-25
	JMP	·CompareAndSwapUint64(SB)

TEXT ·CompareAndSwapInt64(SB),NOSPLIT|NOFRAME,$0-25
	JMP	·CompareAndSwapUint64(SB)

TEXT ·CompareAndSwapUint64(SB),NOSPLIT|NOFRAME,$0-25
	MOVD	addr+0(FP), R25
	MOVD	old+8(FP), R27
	MOVD	new+16(FP), R29
	MEMBAR	$15
	CASD	(R25), R27, R29
	CMP	R29, R27
	MOVD	$0, R27
	MOVE	XCC, $1, R27
	MEMBAR	$15
	MOVB	R27, swapped+24(FP)
	RET

TEXT ·AddInt32(SB),NOSPLIT|NOFRAME,$0-20
	JMP	·AddUint32(SB)

TEXT ·AddUint32(SB),NOSPLIT,$0-20
	MOVD	addr+0(FP), R28
	MOVUW	delta+8(FP), R27
	MOVUW	(R28), R25
	MEMBAR	$15
retry:
	ADD	R25, R27, R29
	CASW	(R28), R25, R29
	CMP	R25, R29
	MOVNE	ICC, R29, R25
	BNEW	retry
	ADD	R25, R27, R29
	MEMBAR	$15
	MOVUW	R29, new+16(FP)
	RET

TEXT ·AddUintptr(SB),NOSPLIT|NOFRAME,$0-24
	JMP	·AddUint64(SB)

TEXT ·AddInt64(SB),NOSPLIT|NOFRAME,$0-24
	JMP	·AddUint64(SB)

TEXT ·AddUint64(SB),NOSPLIT,$0-24
	MOVD	addr+0(FP), R28
	MOVD	delta+8(FP), R27
	MEMBAR	$15
	MOVD	(R28), R25
retry:
	ADD	R25, R27, R29
	CASD	(R28), R25, R29
	CMP	R25, R29
	MOVNE	XCC, R29, R25
	BNED	retry
	ADD	R25, R27, R29
	MEMBAR	$15
	MOVD	R29, new+16(FP)
	RET

TEXT ·LoadInt32(SB),NOSPLIT|NOFRAME,$0-12
	JMP	·LoadUint32(SB)

TEXT ·LoadUint32(SB),NOSPLIT,$0-12
	MOVD	addr+0(FP), R25
	MEMBAR	$3
	LDUW	(R25), R25
	MEMBAR	$5
	MOVUW	R25, val+8(FP)
	RET

TEXT ·LoadInt64(SB),NOSPLIT|NOFRAME,$0-16
	JMP	·LoadUint64(SB)

TEXT ·LoadUint64(SB),NOSPLIT,$0-16
	MOVD	addr+0(FP), R25
	MEMBAR	$3
	LDD	(R25), R25
	MEMBAR	$5
	MOVD	R25, val+8(FP)
	RET

TEXT ·LoadUintptr(SB),NOSPLIT|NOFRAME,$0-16
	JMP	·LoadPointer(SB)

TEXT ·LoadPointer(SB),NOSPLIT|NOFRAME,$0-16
	JMP	·LoadUint64(SB)

TEXT ·StoreInt32(SB),NOSPLIT|NOFRAME,$0-12
	JMP	·StoreUint32(SB)

TEXT ·StoreUint32(SB),NOSPLIT,$0-12
	MOVD	addr+0(FP), R27
	MOVUW	val+8(FP), R29
	MEMBAR	$12
	STW	R29, (R27)
	MEMBAR	$10
	RET

TEXT ·StoreInt64(SB),NOSPLIT|NOFRAME,$0-16
	JMP	·StoreUint64(SB)

TEXT ·StoreUint64(SB),NOSPLIT,$0-16
	MOVD	addr+0(FP), R27
	MOVD	val+8(FP), R29
	MEMBAR	$12
	STD	R29, (R27)
	MEMBAR	$10
	RET

TEXT ·StoreUintptr(SB),NOSPLIT|NOFRAME,$0-16
	JMP	·StoreUint64(SB)
