// autogenerated from gen/SPARC64.rules: do not edit!
// generated with: cd gen; go run *.go

package ssa

import "math"

var _ = math.MinInt8 // in case not otherwise used
func rewriteValueSPARC64(v *Value, config *Config) bool {
	switch v.Op {
	case OpAdd16:
		return rewriteValueSPARC64_OpAdd16(v, config)
	case OpAdd32:
		return rewriteValueSPARC64_OpAdd32(v, config)
	case OpAdd32F:
		return rewriteValueSPARC64_OpAdd32F(v, config)
	case OpAdd64:
		return rewriteValueSPARC64_OpAdd64(v, config)
	case OpAdd64F:
		return rewriteValueSPARC64_OpAdd64F(v, config)
	case OpAdd8:
		return rewriteValueSPARC64_OpAdd8(v, config)
	case OpAddPtr:
		return rewriteValueSPARC64_OpAddPtr(v, config)
	case OpAddr:
		return rewriteValueSPARC64_OpAddr(v, config)
	case OpAnd16:
		return rewriteValueSPARC64_OpAnd16(v, config)
	case OpAnd32:
		return rewriteValueSPARC64_OpAnd32(v, config)
	case OpAnd64:
		return rewriteValueSPARC64_OpAnd64(v, config)
	case OpAnd8:
		return rewriteValueSPARC64_OpAnd8(v, config)
	case OpAndB:
		return rewriteValueSPARC64_OpAndB(v, config)
	case OpAvg64u:
		return rewriteValueSPARC64_OpAvg64u(v, config)
	case OpClosureCall:
		return rewriteValueSPARC64_OpClosureCall(v, config)
	case OpCom16:
		return rewriteValueSPARC64_OpCom16(v, config)
	case OpCom32:
		return rewriteValueSPARC64_OpCom32(v, config)
	case OpCom64:
		return rewriteValueSPARC64_OpCom64(v, config)
	case OpCom8:
		return rewriteValueSPARC64_OpCom8(v, config)
	case OpConst16:
		return rewriteValueSPARC64_OpConst16(v, config)
	case OpConst32:
		return rewriteValueSPARC64_OpConst32(v, config)
	case OpConst32F:
		return rewriteValueSPARC64_OpConst32F(v, config)
	case OpConst64:
		return rewriteValueSPARC64_OpConst64(v, config)
	case OpConst64F:
		return rewriteValueSPARC64_OpConst64F(v, config)
	case OpConst8:
		return rewriteValueSPARC64_OpConst8(v, config)
	case OpConstBool:
		return rewriteValueSPARC64_OpConstBool(v, config)
	case OpConstNil:
		return rewriteValueSPARC64_OpConstNil(v, config)
	case OpConvert:
		return rewriteValueSPARC64_OpConvert(v, config)
	case OpCvt32Fto32:
		return rewriteValueSPARC64_OpCvt32Fto32(v, config)
	case OpCvt32Fto32U:
		return rewriteValueSPARC64_OpCvt32Fto32U(v, config)
	case OpCvt32Fto64:
		return rewriteValueSPARC64_OpCvt32Fto64(v, config)
	case OpCvt32Fto64F:
		return rewriteValueSPARC64_OpCvt32Fto64F(v, config)
	case OpCvt32Fto64U:
		return rewriteValueSPARC64_OpCvt32Fto64U(v, config)
	case OpCvt32Uto32F:
		return rewriteValueSPARC64_OpCvt32Uto32F(v, config)
	case OpCvt32Uto64F:
		return rewriteValueSPARC64_OpCvt32Uto64F(v, config)
	case OpCvt32to32F:
		return rewriteValueSPARC64_OpCvt32to32F(v, config)
	case OpCvt32to64F:
		return rewriteValueSPARC64_OpCvt32to64F(v, config)
	case OpCvt64Fto32:
		return rewriteValueSPARC64_OpCvt64Fto32(v, config)
	case OpCvt64Fto32F:
		return rewriteValueSPARC64_OpCvt64Fto32F(v, config)
	case OpCvt64Fto32U:
		return rewriteValueSPARC64_OpCvt64Fto32U(v, config)
	case OpCvt64Fto64:
		return rewriteValueSPARC64_OpCvt64Fto64(v, config)
	case OpCvt64Fto64U:
		return rewriteValueSPARC64_OpCvt64Fto64U(v, config)
	case OpCvt64Uto32F:
		return rewriteValueSPARC64_OpCvt64Uto32F(v, config)
	case OpCvt64Uto64F:
		return rewriteValueSPARC64_OpCvt64Uto64F(v, config)
	case OpCvt64to32F:
		return rewriteValueSPARC64_OpCvt64to32F(v, config)
	case OpCvt64to64F:
		return rewriteValueSPARC64_OpCvt64to64F(v, config)
	case OpDeferCall:
		return rewriteValueSPARC64_OpDeferCall(v, config)
	case OpDiv16:
		return rewriteValueSPARC64_OpDiv16(v, config)
	case OpDiv16u:
		return rewriteValueSPARC64_OpDiv16u(v, config)
	case OpDiv32:
		return rewriteValueSPARC64_OpDiv32(v, config)
	case OpDiv32F:
		return rewriteValueSPARC64_OpDiv32F(v, config)
	case OpDiv32u:
		return rewriteValueSPARC64_OpDiv32u(v, config)
	case OpDiv64:
		return rewriteValueSPARC64_OpDiv64(v, config)
	case OpDiv64F:
		return rewriteValueSPARC64_OpDiv64F(v, config)
	case OpDiv64u:
		return rewriteValueSPARC64_OpDiv64u(v, config)
	case OpDiv8:
		return rewriteValueSPARC64_OpDiv8(v, config)
	case OpDiv8u:
		return rewriteValueSPARC64_OpDiv8u(v, config)
	case OpEq16:
		return rewriteValueSPARC64_OpEq16(v, config)
	case OpEq32:
		return rewriteValueSPARC64_OpEq32(v, config)
	case OpEq32F:
		return rewriteValueSPARC64_OpEq32F(v, config)
	case OpEq64:
		return rewriteValueSPARC64_OpEq64(v, config)
	case OpEq64F:
		return rewriteValueSPARC64_OpEq64F(v, config)
	case OpEq8:
		return rewriteValueSPARC64_OpEq8(v, config)
	case OpEqB:
		return rewriteValueSPARC64_OpEqB(v, config)
	case OpEqPtr:
		return rewriteValueSPARC64_OpEqPtr(v, config)
	case OpGeq16:
		return rewriteValueSPARC64_OpGeq16(v, config)
	case OpGeq16U:
		return rewriteValueSPARC64_OpGeq16U(v, config)
	case OpGeq32:
		return rewriteValueSPARC64_OpGeq32(v, config)
	case OpGeq32F:
		return rewriteValueSPARC64_OpGeq32F(v, config)
	case OpGeq32U:
		return rewriteValueSPARC64_OpGeq32U(v, config)
	case OpGeq64:
		return rewriteValueSPARC64_OpGeq64(v, config)
	case OpGeq64F:
		return rewriteValueSPARC64_OpGeq64F(v, config)
	case OpGeq64U:
		return rewriteValueSPARC64_OpGeq64U(v, config)
	case OpGeq8:
		return rewriteValueSPARC64_OpGeq8(v, config)
	case OpGeq8U:
		return rewriteValueSPARC64_OpGeq8U(v, config)
	case OpGetClosurePtr:
		return rewriteValueSPARC64_OpGetClosurePtr(v, config)
	case OpGoCall:
		return rewriteValueSPARC64_OpGoCall(v, config)
	case OpGreater16:
		return rewriteValueSPARC64_OpGreater16(v, config)
	case OpGreater16U:
		return rewriteValueSPARC64_OpGreater16U(v, config)
	case OpGreater32:
		return rewriteValueSPARC64_OpGreater32(v, config)
	case OpGreater32F:
		return rewriteValueSPARC64_OpGreater32F(v, config)
	case OpGreater32U:
		return rewriteValueSPARC64_OpGreater32U(v, config)
	case OpGreater64:
		return rewriteValueSPARC64_OpGreater64(v, config)
	case OpGreater64F:
		return rewriteValueSPARC64_OpGreater64F(v, config)
	case OpGreater64U:
		return rewriteValueSPARC64_OpGreater64U(v, config)
	case OpGreater8:
		return rewriteValueSPARC64_OpGreater8(v, config)
	case OpGreater8U:
		return rewriteValueSPARC64_OpGreater8U(v, config)
	case OpHmul16:
		return rewriteValueSPARC64_OpHmul16(v, config)
	case OpHmul16u:
		return rewriteValueSPARC64_OpHmul16u(v, config)
	case OpHmul32:
		return rewriteValueSPARC64_OpHmul32(v, config)
	case OpHmul32u:
		return rewriteValueSPARC64_OpHmul32u(v, config)
	case OpHmul64:
		return rewriteValueSPARC64_OpHmul64(v, config)
	case OpHmul64u:
		return rewriteValueSPARC64_OpHmul64u(v, config)
	case OpHmul8:
		return rewriteValueSPARC64_OpHmul8(v, config)
	case OpHmul8u:
		return rewriteValueSPARC64_OpHmul8u(v, config)
	case OpInterCall:
		return rewriteValueSPARC64_OpInterCall(v, config)
	case OpIsInBounds:
		return rewriteValueSPARC64_OpIsInBounds(v, config)
	case OpIsNonNil:
		return rewriteValueSPARC64_OpIsNonNil(v, config)
	case OpIsSliceInBounds:
		return rewriteValueSPARC64_OpIsSliceInBounds(v, config)
	case OpLeq16:
		return rewriteValueSPARC64_OpLeq16(v, config)
	case OpLeq16U:
		return rewriteValueSPARC64_OpLeq16U(v, config)
	case OpLeq32:
		return rewriteValueSPARC64_OpLeq32(v, config)
	case OpLeq32F:
		return rewriteValueSPARC64_OpLeq32F(v, config)
	case OpLeq32U:
		return rewriteValueSPARC64_OpLeq32U(v, config)
	case OpLeq64:
		return rewriteValueSPARC64_OpLeq64(v, config)
	case OpLeq64F:
		return rewriteValueSPARC64_OpLeq64F(v, config)
	case OpLeq64U:
		return rewriteValueSPARC64_OpLeq64U(v, config)
	case OpLeq8:
		return rewriteValueSPARC64_OpLeq8(v, config)
	case OpLeq8U:
		return rewriteValueSPARC64_OpLeq8U(v, config)
	case OpLess16:
		return rewriteValueSPARC64_OpLess16(v, config)
	case OpLess16U:
		return rewriteValueSPARC64_OpLess16U(v, config)
	case OpLess32:
		return rewriteValueSPARC64_OpLess32(v, config)
	case OpLess32F:
		return rewriteValueSPARC64_OpLess32F(v, config)
	case OpLess32U:
		return rewriteValueSPARC64_OpLess32U(v, config)
	case OpLess64:
		return rewriteValueSPARC64_OpLess64(v, config)
	case OpLess64F:
		return rewriteValueSPARC64_OpLess64F(v, config)
	case OpLess64U:
		return rewriteValueSPARC64_OpLess64U(v, config)
	case OpLess8:
		return rewriteValueSPARC64_OpLess8(v, config)
	case OpLess8U:
		return rewriteValueSPARC64_OpLess8U(v, config)
	case OpLoad:
		return rewriteValueSPARC64_OpLoad(v, config)
	case OpLsh16x16:
		return rewriteValueSPARC64_OpLsh16x16(v, config)
	case OpLsh16x32:
		return rewriteValueSPARC64_OpLsh16x32(v, config)
	case OpLsh16x64:
		return rewriteValueSPARC64_OpLsh16x64(v, config)
	case OpLsh16x8:
		return rewriteValueSPARC64_OpLsh16x8(v, config)
	case OpLsh32x16:
		return rewriteValueSPARC64_OpLsh32x16(v, config)
	case OpLsh32x32:
		return rewriteValueSPARC64_OpLsh32x32(v, config)
	case OpLsh32x64:
		return rewriteValueSPARC64_OpLsh32x64(v, config)
	case OpLsh32x8:
		return rewriteValueSPARC64_OpLsh32x8(v, config)
	case OpLsh64x16:
		return rewriteValueSPARC64_OpLsh64x16(v, config)
	case OpLsh64x32:
		return rewriteValueSPARC64_OpLsh64x32(v, config)
	case OpLsh64x64:
		return rewriteValueSPARC64_OpLsh64x64(v, config)
	case OpLsh64x8:
		return rewriteValueSPARC64_OpLsh64x8(v, config)
	case OpLsh8x16:
		return rewriteValueSPARC64_OpLsh8x16(v, config)
	case OpLsh8x32:
		return rewriteValueSPARC64_OpLsh8x32(v, config)
	case OpLsh8x64:
		return rewriteValueSPARC64_OpLsh8x64(v, config)
	case OpLsh8x8:
		return rewriteValueSPARC64_OpLsh8x8(v, config)
	case OpMod16:
		return rewriteValueSPARC64_OpMod16(v, config)
	case OpMod16u:
		return rewriteValueSPARC64_OpMod16u(v, config)
	case OpMod32:
		return rewriteValueSPARC64_OpMod32(v, config)
	case OpMod32u:
		return rewriteValueSPARC64_OpMod32u(v, config)
	case OpMod64:
		return rewriteValueSPARC64_OpMod64(v, config)
	case OpMod64u:
		return rewriteValueSPARC64_OpMod64u(v, config)
	case OpMod8:
		return rewriteValueSPARC64_OpMod8(v, config)
	case OpMod8u:
		return rewriteValueSPARC64_OpMod8u(v, config)
	case OpMove:
		return rewriteValueSPARC64_OpMove(v, config)
	case OpMul16:
		return rewriteValueSPARC64_OpMul16(v, config)
	case OpMul32:
		return rewriteValueSPARC64_OpMul32(v, config)
	case OpMul32F:
		return rewriteValueSPARC64_OpMul32F(v, config)
	case OpMul64:
		return rewriteValueSPARC64_OpMul64(v, config)
	case OpMul64F:
		return rewriteValueSPARC64_OpMul64F(v, config)
	case OpMul8:
		return rewriteValueSPARC64_OpMul8(v, config)
	case OpNeg16:
		return rewriteValueSPARC64_OpNeg16(v, config)
	case OpNeg32:
		return rewriteValueSPARC64_OpNeg32(v, config)
	case OpNeg32F:
		return rewriteValueSPARC64_OpNeg32F(v, config)
	case OpNeg64:
		return rewriteValueSPARC64_OpNeg64(v, config)
	case OpNeg64F:
		return rewriteValueSPARC64_OpNeg64F(v, config)
	case OpNeg8:
		return rewriteValueSPARC64_OpNeg8(v, config)
	case OpNeq16:
		return rewriteValueSPARC64_OpNeq16(v, config)
	case OpNeq32:
		return rewriteValueSPARC64_OpNeq32(v, config)
	case OpNeq32F:
		return rewriteValueSPARC64_OpNeq32F(v, config)
	case OpNeq64:
		return rewriteValueSPARC64_OpNeq64(v, config)
	case OpNeq64F:
		return rewriteValueSPARC64_OpNeq64F(v, config)
	case OpNeq8:
		return rewriteValueSPARC64_OpNeq8(v, config)
	case OpNeqB:
		return rewriteValueSPARC64_OpNeqB(v, config)
	case OpNeqPtr:
		return rewriteValueSPARC64_OpNeqPtr(v, config)
	case OpNilCheck:
		return rewriteValueSPARC64_OpNilCheck(v, config)
	case OpNot:
		return rewriteValueSPARC64_OpNot(v, config)
	case OpOffPtr:
		return rewriteValueSPARC64_OpOffPtr(v, config)
	case OpOr16:
		return rewriteValueSPARC64_OpOr16(v, config)
	case OpOr32:
		return rewriteValueSPARC64_OpOr32(v, config)
	case OpOr64:
		return rewriteValueSPARC64_OpOr64(v, config)
	case OpOr8:
		return rewriteValueSPARC64_OpOr8(v, config)
	case OpOrB:
		return rewriteValueSPARC64_OpOrB(v, config)
	case OpRsh16Ux16:
		return rewriteValueSPARC64_OpRsh16Ux16(v, config)
	case OpRsh16Ux32:
		return rewriteValueSPARC64_OpRsh16Ux32(v, config)
	case OpRsh16Ux64:
		return rewriteValueSPARC64_OpRsh16Ux64(v, config)
	case OpRsh16Ux8:
		return rewriteValueSPARC64_OpRsh16Ux8(v, config)
	case OpRsh16x16:
		return rewriteValueSPARC64_OpRsh16x16(v, config)
	case OpRsh16x32:
		return rewriteValueSPARC64_OpRsh16x32(v, config)
	case OpRsh16x64:
		return rewriteValueSPARC64_OpRsh16x64(v, config)
	case OpRsh16x8:
		return rewriteValueSPARC64_OpRsh16x8(v, config)
	case OpRsh32Ux16:
		return rewriteValueSPARC64_OpRsh32Ux16(v, config)
	case OpRsh32Ux32:
		return rewriteValueSPARC64_OpRsh32Ux32(v, config)
	case OpRsh32Ux64:
		return rewriteValueSPARC64_OpRsh32Ux64(v, config)
	case OpRsh32Ux8:
		return rewriteValueSPARC64_OpRsh32Ux8(v, config)
	case OpRsh32x16:
		return rewriteValueSPARC64_OpRsh32x16(v, config)
	case OpRsh32x32:
		return rewriteValueSPARC64_OpRsh32x32(v, config)
	case OpRsh32x64:
		return rewriteValueSPARC64_OpRsh32x64(v, config)
	case OpRsh32x8:
		return rewriteValueSPARC64_OpRsh32x8(v, config)
	case OpRsh64Ux16:
		return rewriteValueSPARC64_OpRsh64Ux16(v, config)
	case OpRsh64Ux32:
		return rewriteValueSPARC64_OpRsh64Ux32(v, config)
	case OpRsh64Ux64:
		return rewriteValueSPARC64_OpRsh64Ux64(v, config)
	case OpRsh64Ux8:
		return rewriteValueSPARC64_OpRsh64Ux8(v, config)
	case OpRsh64x16:
		return rewriteValueSPARC64_OpRsh64x16(v, config)
	case OpRsh64x32:
		return rewriteValueSPARC64_OpRsh64x32(v, config)
	case OpRsh64x64:
		return rewriteValueSPARC64_OpRsh64x64(v, config)
	case OpRsh64x8:
		return rewriteValueSPARC64_OpRsh64x8(v, config)
	case OpRsh8Ux16:
		return rewriteValueSPARC64_OpRsh8Ux16(v, config)
	case OpRsh8Ux32:
		return rewriteValueSPARC64_OpRsh8Ux32(v, config)
	case OpRsh8Ux64:
		return rewriteValueSPARC64_OpRsh8Ux64(v, config)
	case OpRsh8Ux8:
		return rewriteValueSPARC64_OpRsh8Ux8(v, config)
	case OpRsh8x16:
		return rewriteValueSPARC64_OpRsh8x16(v, config)
	case OpRsh8x32:
		return rewriteValueSPARC64_OpRsh8x32(v, config)
	case OpRsh8x64:
		return rewriteValueSPARC64_OpRsh8x64(v, config)
	case OpRsh8x8:
		return rewriteValueSPARC64_OpRsh8x8(v, config)
	case OpSPARC64ADD:
		return rewriteValueSPARC64_OpSPARC64ADD(v, config)
	case OpSPARC64ADDconst:
		return rewriteValueSPARC64_OpSPARC64ADDconst(v, config)
	case OpSPARC64AND:
		return rewriteValueSPARC64_OpSPARC64AND(v, config)
	case OpSPARC64ANDconst:
		return rewriteValueSPARC64_OpSPARC64ANDconst(v, config)
	case OpSPARC64CMP:
		return rewriteValueSPARC64_OpSPARC64CMP(v, config)
	case OpSPARC64MOVBstore:
		return rewriteValueSPARC64_OpSPARC64MOVBstore(v, config)
	case OpSPARC64MOVBstorezero:
		return rewriteValueSPARC64_OpSPARC64MOVBstorezero(v, config)
	case OpSPARC64MOVDstore:
		return rewriteValueSPARC64_OpSPARC64MOVDstore(v, config)
	case OpSPARC64MOVDstorezero:
		return rewriteValueSPARC64_OpSPARC64MOVDstorezero(v, config)
	case OpSPARC64MOVHstore:
		return rewriteValueSPARC64_OpSPARC64MOVHstore(v, config)
	case OpSPARC64MOVHstorezero:
		return rewriteValueSPARC64_OpSPARC64MOVHstorezero(v, config)
	case OpSPARC64MOVWstore:
		return rewriteValueSPARC64_OpSPARC64MOVWstore(v, config)
	case OpSPARC64MOVWstorezero:
		return rewriteValueSPARC64_OpSPARC64MOVWstorezero(v, config)
	case OpSPARC64OR:
		return rewriteValueSPARC64_OpSPARC64OR(v, config)
	case OpSPARC64ORconst:
		return rewriteValueSPARC64_OpSPARC64ORconst(v, config)
	case OpSPARC64SLLmax:
		return rewriteValueSPARC64_OpSPARC64SLLmax(v, config)
	case OpSPARC64SRAmax:
		return rewriteValueSPARC64_OpSPARC64SRAmax(v, config)
	case OpSPARC64SRLmax:
		return rewriteValueSPARC64_OpSPARC64SRLmax(v, config)
	case OpSPARC64SUB:
		return rewriteValueSPARC64_OpSPARC64SUB(v, config)
	case OpSPARC64SUBconst:
		return rewriteValueSPARC64_OpSPARC64SUBconst(v, config)
	case OpSPARC64XOR:
		return rewriteValueSPARC64_OpSPARC64XOR(v, config)
	case OpSPARC64XORconst:
		return rewriteValueSPARC64_OpSPARC64XORconst(v, config)
	case OpSignExt16to32:
		return rewriteValueSPARC64_OpSignExt16to32(v, config)
	case OpSignExt16to64:
		return rewriteValueSPARC64_OpSignExt16to64(v, config)
	case OpSignExt32to64:
		return rewriteValueSPARC64_OpSignExt32to64(v, config)
	case OpSignExt8to16:
		return rewriteValueSPARC64_OpSignExt8to16(v, config)
	case OpSignExt8to32:
		return rewriteValueSPARC64_OpSignExt8to32(v, config)
	case OpSignExt8to64:
		return rewriteValueSPARC64_OpSignExt8to64(v, config)
	case OpSqrt:
		return rewriteValueSPARC64_OpSqrt(v, config)
	case OpStaticCall:
		return rewriteValueSPARC64_OpStaticCall(v, config)
	case OpStore:
		return rewriteValueSPARC64_OpStore(v, config)
	case OpSub16:
		return rewriteValueSPARC64_OpSub16(v, config)
	case OpSub32:
		return rewriteValueSPARC64_OpSub32(v, config)
	case OpSub32F:
		return rewriteValueSPARC64_OpSub32F(v, config)
	case OpSub64:
		return rewriteValueSPARC64_OpSub64(v, config)
	case OpSub64F:
		return rewriteValueSPARC64_OpSub64F(v, config)
	case OpSub8:
		return rewriteValueSPARC64_OpSub8(v, config)
	case OpSubPtr:
		return rewriteValueSPARC64_OpSubPtr(v, config)
	case OpTrunc16to8:
		return rewriteValueSPARC64_OpTrunc16to8(v, config)
	case OpTrunc32to16:
		return rewriteValueSPARC64_OpTrunc32to16(v, config)
	case OpTrunc32to8:
		return rewriteValueSPARC64_OpTrunc32to8(v, config)
	case OpTrunc64to16:
		return rewriteValueSPARC64_OpTrunc64to16(v, config)
	case OpTrunc64to32:
		return rewriteValueSPARC64_OpTrunc64to32(v, config)
	case OpTrunc64to8:
		return rewriteValueSPARC64_OpTrunc64to8(v, config)
	case OpXor16:
		return rewriteValueSPARC64_OpXor16(v, config)
	case OpXor32:
		return rewriteValueSPARC64_OpXor32(v, config)
	case OpXor64:
		return rewriteValueSPARC64_OpXor64(v, config)
	case OpXor8:
		return rewriteValueSPARC64_OpXor8(v, config)
	case OpZero:
		return rewriteValueSPARC64_OpZero(v, config)
	case OpZeroExt16to32:
		return rewriteValueSPARC64_OpZeroExt16to32(v, config)
	case OpZeroExt16to64:
		return rewriteValueSPARC64_OpZeroExt16to64(v, config)
	case OpZeroExt32to64:
		return rewriteValueSPARC64_OpZeroExt32to64(v, config)
	case OpZeroExt8to16:
		return rewriteValueSPARC64_OpZeroExt8to16(v, config)
	case OpZeroExt8to32:
		return rewriteValueSPARC64_OpZeroExt8to32(v, config)
	case OpZeroExt8to64:
		return rewriteValueSPARC64_OpZeroExt8to64(v, config)
	}
	return false
}
func rewriteValueSPARC64_OpAdd16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add16  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add32  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add32F x y)
	// cond:
	// result: (FADDS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FADDS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add64  x y)
	// cond:
	// result: (ADD  x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add64F x y)
	// cond:
	// result: (FADDD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FADDD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add8   x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAddPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (AddPtr x y)
	// cond:
	// result: (ADD  x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAddr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Addr {sym} base)
	// cond:
	// result: (MOVDaddr {sym} base)
	for {
		sym := v.Aux
		base := v.Args[0]
		v.reset(OpSPARC64MOVDaddr)
		v.Aux = sym
		v.AddArg(base)
		return true
	}
}
func rewriteValueSPARC64_OpAnd16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (And16 x y)
	// cond:
	// result: (AND x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64AND)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAnd32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (And32 x y)
	// cond:
	// result: (AND x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64AND)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAnd64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (And64 x y)
	// cond:
	// result: (AND x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64AND)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAnd8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (And8 x y)
	// cond:
	// result: (AND x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64AND)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAndB(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (AndB x y)
	// cond:
	// result: (AND x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64AND)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAvg64u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Avg64u <t> x y)
	// cond:
	// result: (ADD (ADD <t> (SRLconst <t> x [1]) (SRLconst <t> y [1])) (AND <t> (AND <t> x y) (MOVDconst [1])))
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v0 := b.NewValue0(v.Line, OpSPARC64ADD, t)
		v1 := b.NewValue0(v.Line, OpSPARC64SRLconst, t)
		v1.AuxInt = 1
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSPARC64SRLconst, t)
		v2.AuxInt = 1
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		v3 := b.NewValue0(v.Line, OpSPARC64AND, t)
		v4 := b.NewValue0(v.Line, OpSPARC64AND, t)
		v4.AddArg(x)
		v4.AddArg(y)
		v3.AddArg(v4)
		v5 := b.NewValue0(v.Line, OpSPARC64MOVDconst, config.fe.TypeUInt64())
		v5.AuxInt = 1
		v3.AddArg(v5)
		v.AddArg(v3)
		return true
	}
}
func rewriteValueSPARC64_OpClosureCall(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ClosureCall [argwid] entry closure mem)
	// cond:
	// result: (CALLclosure [argwid] entry closure mem)
	for {
		argwid := v.AuxInt
		entry := v.Args[0]
		closure := v.Args[1]
		mem := v.Args[2]
		v.reset(OpSPARC64CALLclosure)
		v.AuxInt = argwid
		v.AddArg(entry)
		v.AddArg(closure)
		v.AddArg(mem)
		return true
	}
}
func rewriteValueSPARC64_OpCom16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Com16 x)
	// cond:
	// result: (XORconst [-1] x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64XORconst)
		v.AuxInt = -1
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCom32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Com32 x)
	// cond:
	// result: (XORconst [-1] x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64XORconst)
		v.AuxInt = -1
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCom64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Com64 x)
	// cond:
	// result: (XORconst [-1] x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64XORconst)
		v.AuxInt = -1
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCom8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Com8  x)
	// cond:
	// result: (XORconst [-1] x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64XORconst)
		v.AuxInt = -1
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpConst16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Const16  [val])
	// cond:
	// result: (MOVWconst [val])
	for {
		val := v.AuxInt
		v.reset(OpSPARC64MOVWconst)
		v.AuxInt = val
		return true
	}
}
func rewriteValueSPARC64_OpConst32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Const32  [val])
	// cond:
	// result: (MOVWconst [val])
	for {
		val := v.AuxInt
		v.reset(OpSPARC64MOVWconst)
		v.AuxInt = val
		return true
	}
}
func rewriteValueSPARC64_OpConst32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Const32F [val])
	// cond:
	// result: (FMOVSconst [val])
	for {
		val := v.AuxInt
		v.reset(OpSPARC64FMOVSconst)
		v.AuxInt = val
		return true
	}
}
func rewriteValueSPARC64_OpConst64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Const64  [val])
	// cond:
	// result: (MOVDconst [val])
	for {
		val := v.AuxInt
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = val
		return true
	}
}
func rewriteValueSPARC64_OpConst64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Const64F [val])
	// cond:
	// result: (FMOVDconst [val])
	for {
		val := v.AuxInt
		v.reset(OpSPARC64FMOVDconst)
		v.AuxInt = val
		return true
	}
}
func rewriteValueSPARC64_OpConst8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Const8   [val])
	// cond:
	// result: (MOVWconst [val])
	for {
		val := v.AuxInt
		v.reset(OpSPARC64MOVWconst)
		v.AuxInt = val
		return true
	}
}
func rewriteValueSPARC64_OpConstBool(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ConstBool [b])
	// cond:
	// result: (MOVWconst [b])
	for {
		b := v.AuxInt
		v.reset(OpSPARC64MOVWconst)
		v.AuxInt = b
		return true
	}
}
func rewriteValueSPARC64_OpConstNil(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ConstNil)
	// cond:
	// result: (MOVDconst [0])
	for {
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
}
func rewriteValueSPARC64_OpConvert(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Convert x mem)
	// cond:
	// result: (MOVDconvert x mem)
	for {
		x := v.Args[0]
		mem := v.Args[1]
		v.reset(OpSPARC64MOVDconvert)
		v.AddArg(x)
		v.AddArg(mem)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32Fto32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Fto32 x)
	// cond:
	// result: (FSTOI x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FSTOI)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32Fto32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Fto32U x)
	// cond:
	// result: (FSTOI x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FSTOI)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32Fto64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Fto64 x)
	// cond:
	// result: (FSTOX x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FSTOX)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32Fto64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Fto64F x)
	// cond:
	// result: (FSTOD x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FSTOD)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32Fto64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Fto64U x)
	// cond:
	// result: (FSTOX x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FSTOX)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32Uto32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Uto32F x)
	// cond:
	// result: (FITOS x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FITOS)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32Uto64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Uto64F x)
	// cond:
	// result: (FITOD x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FITOD)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32to32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32to32F x)
	// cond:
	// result: (FITOS x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FITOS)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt32to64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt32to64F x)
	// cond:
	// result: (FITOD x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FITOD)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64Fto32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Fto32 x)
	// cond:
	// result: (FDTOI x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FDTOI)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64Fto32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Fto32F x)
	// cond:
	// result: (FDTOS x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FDTOS)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64Fto32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Fto32U x)
	// cond:
	// result: (FDTOI x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FDTOI)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64Fto64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Fto64 x)
	// cond:
	// result: (FDTOX x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FDTOX)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64Fto64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Fto64U x)
	// cond:
	// result: (FDTOX x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FDTOX)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64Uto32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Uto32F x)
	// cond:
	// result: (FXTOS x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FXTOS)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64Uto64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Uto64F x)
	// cond:
	// result: (FXTOD x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FXTOD)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64to32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64to32F x)
	// cond:
	// result: (FXTOS x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FXTOS)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpCvt64to64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Cvt64to64F x)
	// cond:
	// result: (FXTOD x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FXTOD)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpDeferCall(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (DeferCall [argwid] mem)
	// cond:
	// result: (CALLdefer [argwid] mem)
	for {
		argwid := v.AuxInt
		mem := v.Args[0]
		v.reset(OpSPARC64CALLdefer)
		v.AuxInt = argwid
		v.AddArg(mem)
		return true
	}
}
func rewriteValueSPARC64_OpDiv16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div16 x y)
	// cond:
	// result: (SDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv16u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div16u x y)
	// cond:
	// result: (UDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div32 x y)
	// cond:
	// result: (SDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div32F x y)
	// cond:
	// result: (FDIVS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FDIVS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv32u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div32u x y)
	// cond:
	// result: (UDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div64 x y)
	// cond:
	// result: (SDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div64F x y)
	// cond:
	// result: (FDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv64u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div64u x y)
	// cond:
	// result: (UDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div8 x y)
	// cond:
	// result: (SDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv8u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div8u x y)
	// cond:
	// result: (UDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpEq16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq16 x y)
	// cond:
	// result: (Equal32 (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64Equal32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpEq32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq32 x y)
	// cond:
	// result: (Equal32 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64Equal32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpEq32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq32F x y)
	// cond:
	// result: (EqualF (FCMPS x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64EqualF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPS, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpEq64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq64 x y)
	// cond:
	// result: (Equal64 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64Equal64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpEq64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq64F x y)
	// cond:
	// result: (EqualF (FCMPD x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64EqualF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPD, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpEq8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Eq8 x y)
	// cond:
	// result: (Equal32 (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64Equal32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpEqB(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (EqB x y)
	// cond:
	// result: (XOR (MOVDconst [1]) (XOR <config.fe.TypeBool()> x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64XOR)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDconst, config.fe.TypeUInt64())
		v0.AuxInt = 1
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64XOR, config.fe.TypeBool())
		v1.AddArg(x)
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpEqPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (EqPtr x y)
	// cond:
	// result: (Equal64 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64Equal64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq16 x y)
	// cond:
	// result: (GreaterEqual32 (CMP (SignExt16to32 x) (SignExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq16U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq16U x y)
	// cond:
	// result: (GreaterEqual32U (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqual32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq32 x y)
	// cond:
	// result: (GreaterEqual32 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq32F x y)
	// cond:
	// result: (GreaterEqualF (FCMPS x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqualF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPS, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq32U x y)
	// cond:
	// result: (GreaterEqual32U (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqual32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq64 x y)
	// cond:
	// result: (GreaterEqual64 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqual64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq64F x y)
	// cond:
	// result: (GreaterEqualF (FCMPD x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqualF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPD, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq64U x y)
	// cond:
	// result: (GreaterEqual64U (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqual64U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq8 x y)
	// cond:
	// result: (GreaterEqual32 (CMP (SignExt8to32 x) (SignExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGeq8U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Geq8U x y)
	// cond:
	// result: (GreaterEqual32U (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterEqual32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGetClosurePtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (GetClosurePtr)
	// cond:
	// result: (LoweredGetClosurePtr)
	for {
		v.reset(OpSPARC64LoweredGetClosurePtr)
		return true
	}
}
func rewriteValueSPARC64_OpGoCall(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (GoCall [argwid] mem)
	// cond:
	// result: (CALLgo [argwid] mem)
	for {
		argwid := v.AuxInt
		mem := v.Args[0]
		v.reset(OpSPARC64CALLgo)
		v.AuxInt = argwid
		v.AddArg(mem)
		return true
	}
}
func rewriteValueSPARC64_OpGreater16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater16 x y)
	// cond:
	// result: (GreaterThan32 (CMP (SignExt16to32 x) (SignExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThan32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater16U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater16U x y)
	// cond:
	// result: (GreaterThan32U (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThan32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater32 x y)
	// cond:
	// result: (GreaterThan32 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThan32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater32F x y)
	// cond:
	// result: (GreaterThanF (FCMPS x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThanF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPS, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater32U x y)
	// cond:
	// result: (GreaterThan32U (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThan32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater64 x y)
	// cond:
	// result: (GreaterThan64 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThan64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater64F x y)
	// cond:
	// result: (GreaterThanF (FCMPD x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThanF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPD, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater64U x y)
	// cond:
	// result: (GreaterThan64U (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThan64U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater8 x y)
	// cond:
	// result: (GreaterThan32 (CMP (SignExt8to32 x) (SignExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThan32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpGreater8U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Greater8U x y)
	// cond:
	// result: (GreaterThan32U (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64GreaterThan32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpHmul16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Hmul16 x y)
	// cond:
	// result: (SRAconst (MULD <config.fe.TypeInt32()> (SignExt16to32 x) (SignExt16to32 y)) [16])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = 16
		v0 := b.NewValue0(v.Line, OpSPARC64MULD, config.fe.TypeInt32())
		v1 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpHmul16u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Hmul16u x y)
	// cond:
	// result: (SRLconst (MULD <config.fe.TypeUInt32()> (ZeroExt16to32 x) (ZeroExt16to32 y)) [16])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLconst)
		v.AuxInt = 16
		v0 := b.NewValue0(v.Line, OpSPARC64MULD, config.fe.TypeUInt32())
		v1 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpHmul32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Hmul32 x y)
	// cond:
	// result: (SRAconst (MULD <config.fe.TypeInt64()> x y) [32])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = 32
		v0 := b.NewValue0(v.Line, OpSPARC64MULD, config.fe.TypeInt64())
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpHmul32u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Hmul32u x y)
	// cond:
	// result: (SRAconst (MULD <config.fe.TypeUInt64()> x y) [32])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = 32
		v0 := b.NewValue0(v.Line, OpSPARC64MULD, config.fe.TypeUInt64())
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpHmul64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Hmul64 x y)
	// cond:
	// result: (MULXHI x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULXHI)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpHmul64u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Hmul64u x y)
	// cond:
	// result: (UMULXHI x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UMULXHI)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpHmul8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Hmul8 x y)
	// cond:
	// result: (SRAconst (MULD <config.fe.TypeInt16()> (SignExt8to32 x) (SignExt8to32 y)) [8])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = 8
		v0 := b.NewValue0(v.Line, OpSPARC64MULD, config.fe.TypeInt16())
		v1 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpHmul8u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Hmul8u x y)
	// cond:
	// result: (SRLconst (MULD <config.fe.TypeUInt16()> (ZeroExt8to32 x) (ZeroExt8to32 y)) [8])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLconst)
		v.AuxInt = 8
		v0 := b.NewValue0(v.Line, OpSPARC64MULD, config.fe.TypeUInt16())
		v1 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpInterCall(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (InterCall [argwid] entry mem)
	// cond:
	// result: (CALLinter [argwid] entry mem)
	for {
		argwid := v.AuxInt
		entry := v.Args[0]
		mem := v.Args[1]
		v.reset(OpSPARC64CALLinter)
		v.AuxInt = argwid
		v.AddArg(entry)
		v.AddArg(mem)
		return true
	}
}
func rewriteValueSPARC64_OpIsInBounds(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (IsInBounds idx len)
	// cond:
	// result: (LessThan64U (CMP idx len))
	for {
		idx := v.Args[0]
		len := v.Args[1]
		v.reset(OpSPARC64LessThan64U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(idx)
		v0.AddArg(len)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpIsNonNil(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (IsNonNil ptr)
	// cond:
	// result: (NotEqual64 (CMPconst [0] ptr))
	for {
		ptr := v.Args[0]
		v.reset(OpSPARC64NotEqual64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMPconst, TypeFlags)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpIsSliceInBounds(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (IsSliceInBounds idx len)
	// cond:
	// result: (LessEqual64U (CMP idx len))
	for {
		idx := v.Args[0]
		len := v.Args[1]
		v.reset(OpSPARC64LessEqual64U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(idx)
		v0.AddArg(len)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq16 x y)
	// cond:
	// result: (LessEqual32 (CMP (SignExt16to32 x) (SignExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq16U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq16U x y)
	// cond:
	// result: (LessEqual32U (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqual32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq32 x y)
	// cond:
	// result: (LessEqual32 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq32F x y)
	// cond:
	// result: (LessEqualF (FCMPS x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqualF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPS, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq32U x y)
	// cond:
	// result: (LessEqual32U (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqual32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq64 x y)
	// cond:
	// result: (LessEqual64 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqual64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq64F x y)
	// cond:
	// result: (LessEqualF (FCMPD x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqualF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPD, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq64U x y)
	// cond:
	// result: (LessEqual64U (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqual64U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq8 x y)
	// cond:
	// result: (LessEqual32 (CMP (SignExt8to32 x) (SignExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLeq8U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Leq8U x y)
	// cond:
	// result: (LessEqual32U (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessEqual32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less16 x y)
	// cond:
	// result: (LessThan32 (CMP (SignExt16to32 x) (SignExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThan32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt16to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess16U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less16U x y)
	// cond:
	// result: (LessThan32U (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThan32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less32 x y)
	// cond:
	// result: (LessThan32 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThan32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less32F x y)
	// cond:
	// result: (LessThanF (FCMPS x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThanF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPS, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess32U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less32U x y)
	// cond:
	// result: (LessThan32U (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThan32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less64 x y)
	// cond:
	// result: (LessThan64 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThan64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less64F x y)
	// cond:
	// result: (LessThanF (FCMPD x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThanF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPD, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess64U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less64U x y)
	// cond:
	// result: (LessThan64U (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThan64U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less8 x y)
	// cond:
	// result: (LessThan32 (CMP (SignExt8to32 x) (SignExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThan32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpSignExt8to32, config.fe.TypeInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLess8U(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Less8U x y)
	// cond:
	// result: (LessThan32U (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64LessThan32U)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLoad(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Load <t> ptr mem)
	// cond: t.IsBoolean()
	// result: (MOVUBload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(t.IsBoolean()) {
			break
		}
		v.reset(OpSPARC64MOVUBload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: (is8BitInt(t) && isSigned(t))
	// result: (MOVBload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is8BitInt(t) && isSigned(t)) {
			break
		}
		v.reset(OpSPARC64MOVBload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: (is8BitInt(t) && !isSigned(t))
	// result: (MOVUBload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is8BitInt(t) && !isSigned(t)) {
			break
		}
		v.reset(OpSPARC64MOVUBload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: (is16BitInt(t) && isSigned(t))
	// result: (MOVHload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is16BitInt(t) && isSigned(t)) {
			break
		}
		v.reset(OpSPARC64MOVHload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: (is16BitInt(t) && !isSigned(t))
	// result: (MOVUHload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is16BitInt(t) && !isSigned(t)) {
			break
		}
		v.reset(OpSPARC64MOVUHload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: (is32BitInt(t) && isSigned(t))
	// result: (MOVWload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is32BitInt(t) && isSigned(t)) {
			break
		}
		v.reset(OpSPARC64MOVWload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: (is32BitInt(t) && !isSigned(t))
	// result: (MOVUWload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is32BitInt(t) && !isSigned(t)) {
			break
		}
		v.reset(OpSPARC64MOVUWload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: (is64BitInt(t) || isPtr(t))
	// result: (MOVDload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is64BitInt(t) || isPtr(t)) {
			break
		}
		v.reset(OpSPARC64MOVDload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: is32BitFloat(t)
	// result: (FMOVSload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is32BitFloat(t)) {
			break
		}
		v.reset(OpSPARC64FMOVSload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Load <t> ptr mem)
	// cond: is64BitFloat(t)
	// result: (FMOVDload ptr mem)
	for {
		t := v.Type
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(is64BitFloat(t)) {
			break
		}
		v.reset(OpSPARC64FMOVDload)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpLsh16x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x16 <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt16to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh16x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x32 <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt32to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh16x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x64 <t> x y)
	// cond:
	// result: (SLLmax <t> x y [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpLsh16x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x8  <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt8to64  y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh32x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x16 <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt16to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh32x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x32 <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt32to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh32x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x64 <t> x y)
	// cond:
	// result: (SLLmax <t> x y [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpLsh32x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x8  <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt8to64  y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh64x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x16 <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt16to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh64x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x32 <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt32to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh64x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x64 <t> x y)
	// cond:
	// result: (SLLmax <t> x y [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpLsh64x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x8  <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt8to64  y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh8x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x16 <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt16to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh8x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x32 <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt32to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpLsh8x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x64 <t> x y)
	// cond:
	// result: (SLLmax <t> x y [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpLsh8x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x8  <t> x y)
	// cond:
	// result: (SLLmax <t> x (ZeroExt8to64  y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SLLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpMod16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mod16 x y)
	// cond:
	// result: (Mod64 (SignExt16to64 x) (SignExt16to64 y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpMod64)
		v0 := b.NewValue0(v.Line, OpSignExt16to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSignExt16to64, config.fe.TypeInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpMod16u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mod16u x y)
	// cond:
	// result: (Mod64u (ZeroExt16to64 x) (ZeroExt16to64 y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpMod64u)
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpMod32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mod32 x y)
	// cond:
	// result: (Mod64 (SignExt32to64 x) (SignExt32to64 y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpMod64)
		v0 := b.NewValue0(v.Line, OpSignExt32to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSignExt32to64, config.fe.TypeInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpMod32u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mod32u x y)
	// cond:
	// result: (Mod64u (ZeroExt32to64 x) (ZeroExt32to64 y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpMod64u)
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpMod64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mod64 x y)
	// cond:
	// result: (SUB x (MULD y (SDIVD x y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpSPARC64MULD, config.fe.TypeInt64())
		v0.AddArg(y)
		v1 := b.NewValue0(v.Line, OpSPARC64SDIVD, config.fe.TypeInt64())
		v1.AddArg(x)
		v1.AddArg(y)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpMod64u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mod64u x y)
	// cond:
	// result: (SUB x (MULD y (UDIVD x y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpSPARC64MULD, config.fe.TypeInt64())
		v0.AddArg(y)
		v1 := b.NewValue0(v.Line, OpSPARC64UDIVD, config.fe.TypeUInt64())
		v1.AddArg(x)
		v1.AddArg(y)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpMod8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mod8 x y)
	// cond:
	// result: (Mod64 (SignExt8to64 x) (SignExt8to64 y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpMod64)
		v0 := b.NewValue0(v.Line, OpSignExt8to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSignExt8to64, config.fe.TypeInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpMod8u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mod8u x y)
	// cond:
	// result: (Mod64u (ZeroExt8to64 x) (ZeroExt8to64 y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpMod64u)
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpMove(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Move [s] _ _ mem)
	// cond: SizeAndAlign(s).Size() == 0
	// result: mem
	for {
		s := v.AuxInt
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 0) {
			break
		}
		v.reset(OpCopy)
		v.Type = mem.Type
		v.AddArg(mem)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 1
	// result: (MOVBstore dst (MOVUBload src mem) mem)
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 1) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v.AddArg(mem)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 2 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVHstore dst (MOVUHload src mem) mem)
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 2 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstore)
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v.AddArg(mem)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 2
	// result: (MOVBstore [1] dst (MOVUBload [1] src mem) 		(MOVBstore dst (MOVUBload src mem) mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 2) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 1
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 1
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 4 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVWstore dst (MOVUWload src mem) mem)
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 4 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVWstore)
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUWload, config.fe.TypeUInt32())
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v.AddArg(mem)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 4 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVHstore [2] dst (MOVUHload [2] src mem) 		(MOVHstore dst (MOVUHload src mem) mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 4 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstore)
		v.AuxInt = 2
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v0.AuxInt = 2
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 4
	// result: (MOVBstore [3] dst (MOVUBload [3] src mem) 		(MOVBstore [2] dst (MOVUBload [2] src mem) 			(MOVBstore [1] dst (MOVUBload [1] src mem) 				(MOVBstore dst (MOVUBload src mem) mem))))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 4) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 3
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 3
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v1.AuxInt = 2
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v2.AuxInt = 2
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v3.AuxInt = 1
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v4.AuxInt = 1
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v5 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v5.AddArg(dst)
		v6 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v6.AddArg(src)
		v6.AddArg(mem)
		v5.AddArg(v6)
		v5.AddArg(mem)
		v3.AddArg(v5)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVDstore dst (MOVDload src mem) mem)
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVDstore)
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v.AddArg(mem)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVWstore [4] dst (MOVUWload [4] src mem) 		(MOVWstore dst (MOVUWload src mem) mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVWstore)
		v.AuxInt = 4
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUWload, config.fe.TypeUInt32())
		v0.AuxInt = 4
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVWstore, TypeMem)
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUWload, config.fe.TypeUInt32())
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVHstore [6] dst (MOVUHload [6] src mem) 		(MOVHstore [4] dst (MOVUHload [4] src mem) 			(MOVHstore [2] dst (MOVUHload [2] src mem) 				(MOVHstore dst (MOVUHload src mem) mem))))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstore)
		v.AuxInt = 6
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v0.AuxInt = 6
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v1.AuxInt = 4
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v2.AuxInt = 4
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v3.AuxInt = 2
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v4.AuxInt = 2
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v5 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v5.AddArg(dst)
		v6 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v6.AddArg(src)
		v6.AddArg(mem)
		v5.AddArg(v6)
		v5.AddArg(mem)
		v3.AddArg(v5)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 3 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVBstore [2] dst (MOVUBload [2] src mem) 		(MOVHstore dst (MOVUHload src mem) mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 3 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 2
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 2
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 3
	// result: (MOVBstore [2] dst (MOVUBload [2] src mem) 		(MOVBstore [1] dst (MOVUBload [1] src mem) 			(MOVBstore dst (MOVUBload src mem) mem)))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 3) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 2
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 2
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v1.AuxInt = 1
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v2.AuxInt = 1
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v3.AddArg(mem)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 5 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVBstore [4] dst (MOVUBload [4] src mem) 		(MOVWstore dst (MOVUWload src mem) mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 5 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 4
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 4
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVWstore, TypeMem)
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUWload, config.fe.TypeUInt32())
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 5 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVBstore [4] dst (MOVUBload [4] src mem) 		(MOVHstore [2] dst (MOVUHload [2] src mem) 			(MOVHstore dst (MOVUHload src mem) mem)))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 5 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 4
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 4
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v1.AuxInt = 2
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v2.AuxInt = 2
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v3.AddArg(mem)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 5
	// result: (MOVBstore [4] dst (MOVUBload [4] src mem) 		(MOVBstore [3] dst (MOVUBload [3] src mem) 			(MOVBstore [2] dst (MOVUBload [2] src mem) 				(MOVBstore [1] dst (MOVUBload [1] src mem) 					(MOVBstore dst (MOVUBload src mem) mem)))))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 5) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 4
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 4
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v1.AuxInt = 3
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v2.AuxInt = 3
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v3.AuxInt = 2
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v4.AuxInt = 2
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v5 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v5.AuxInt = 1
		v5.AddArg(dst)
		v6 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v6.AuxInt = 1
		v6.AddArg(src)
		v6.AddArg(mem)
		v5.AddArg(v6)
		v7 := b.NewValue0(v.Line, OpSPARC64MOVBstore, TypeMem)
		v7.AddArg(dst)
		v8 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v8.AddArg(src)
		v8.AddArg(mem)
		v7.AddArg(v8)
		v7.AddArg(mem)
		v5.AddArg(v7)
		v3.AddArg(v5)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 6 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVHstore [4] dst (MOVUHload [4] src mem) 		(MOVWstore dst (MOVUWload src mem) mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 6 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstore)
		v.AuxInt = 4
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v0.AuxInt = 4
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVWstore, TypeMem)
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUWload, config.fe.TypeUInt32())
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 6 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVHstore [4] dst (MOVUHload [4] src mem) 		(MOVHstore [2] dst (MOVUHload [2] src mem) 			(MOVHstore dst (MOVUHload src mem) mem)))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 6 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstore)
		v.AuxInt = 4
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v0.AuxInt = 4
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v1.AuxInt = 2
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v2.AuxInt = 2
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v3.AddArg(mem)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 7 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVBstore [6] dst (MOVUBload [6] src mem) 		(MOVHstore [4] dst (MOVUHload [4] src mem) 			(MOVWstore dst (MOVUWload src mem) mem)))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 7 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 6
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 6
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v1.AuxInt = 4
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v2.AuxInt = 4
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVWstore, TypeMem)
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVUWload, config.fe.TypeUInt32())
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v3.AddArg(mem)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 7 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVBstore [6] dst (MOVUBload [6] src mem) 		(MOVHstore [4] dst (MOVUHload [4] src mem) 			(MOVHstore [2] dst (MOVUHload [2] src mem) 				(MOVHstore dst (MOVUHload src mem) mem))))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 7 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstore)
		v.AuxInt = 6
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUBload, config.fe.TypeUInt8())
		v0.AuxInt = 6
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v1.AuxInt = 4
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v2.AuxInt = 4
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v3.AuxInt = 2
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v4.AuxInt = 2
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v5 := b.NewValue0(v.Line, OpSPARC64MOVHstore, TypeMem)
		v5.AddArg(dst)
		v6 := b.NewValue0(v.Line, OpSPARC64MOVUHload, config.fe.TypeUInt16())
		v6.AddArg(src)
		v6.AddArg(mem)
		v5.AddArg(v6)
		v5.AddArg(mem)
		v3.AddArg(v5)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 12 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVWstore [8] dst (MOVUWload [8] src mem) 		(MOVDstore dst (MOVDload src mem) mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 12 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVWstore)
		v.AuxInt = 8
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVUWload, config.fe.TypeUInt32())
		v0.AuxInt = 8
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVDstore, TypeMem)
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 16 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVDstore [8] dst (MOVDload [8] src mem) 		(MOVDstore dst (MOVDload src mem) mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 16 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVDstore)
		v.AuxInt = 8
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v0.AuxInt = 8
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVDstore, TypeMem)
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 24 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVDstore [16] dst (MOVDload [16] src mem) 		(MOVDstore [8] dst (MOVDload [8] src mem) 			(MOVDstore dst (MOVDload src mem) mem)))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 24 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVDstore)
		v.AuxInt = 16
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v0.AuxInt = 16
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVDstore, TypeMem)
		v1.AuxInt = 8
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v2.AuxInt = 8
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVDstore, TypeMem)
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v3.AddArg(mem)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() == 32 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVDstore [24] dst (MOVDload [24] src mem) 		(MOVDstore [16] dst (MOVDload [16] src mem) 			(MOVDstore [8] dst (MOVDload [8] src mem) 				(MOVDstore dst (MOVDload src mem) mem))))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() == 32 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVDstore)
		v.AuxInt = 24
		v.AddArg(dst)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v0.AuxInt = 24
		v0.AddArg(src)
		v0.AddArg(mem)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVDstore, TypeMem)
		v1.AuxInt = 16
		v1.AddArg(dst)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v2.AuxInt = 16
		v2.AddArg(src)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVDstore, TypeMem)
		v3.AuxInt = 8
		v3.AddArg(dst)
		v4 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v4.AuxInt = 8
		v4.AddArg(src)
		v4.AddArg(mem)
		v3.AddArg(v4)
		v5 := b.NewValue0(v.Line, OpSPARC64MOVDstore, TypeMem)
		v5.AddArg(dst)
		v6 := b.NewValue0(v.Line, OpSPARC64MOVDload, config.fe.TypeUInt64())
		v6.AddArg(src)
		v6.AddArg(mem)
		v5.AddArg(v6)
		v5.AddArg(mem)
		v3.AddArg(v5)
		v1.AddArg(v3)
		v.AddArg(v1)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size()%8 != 0 && SizeAndAlign(s).Size() > 8
	// result: (Move [MakeSizeAndAlign(SizeAndAlign(s).Size()%8, 1).Int64()] 		(OffPtr <dst.Type> dst [SizeAndAlign(s).Size()-SizeAndAlign(s).Size()%8]) 		(OffPtr <src.Type> src [SizeAndAlign(s).Size()-SizeAndAlign(s).Size()%8]) 		(Move [MakeSizeAndAlign(SizeAndAlign(s).Size()-SizeAndAlign(s).Size()%8, 1).Int64()] dst src mem))
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size()%8 != 0 && SizeAndAlign(s).Size() > 8) {
			break
		}
		v.reset(OpMove)
		v.AuxInt = MakeSizeAndAlign(SizeAndAlign(s).Size()%8, 1).Int64()
		v0 := b.NewValue0(v.Line, OpOffPtr, dst.Type)
		v0.AuxInt = SizeAndAlign(s).Size() - SizeAndAlign(s).Size()%8
		v0.AddArg(dst)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpOffPtr, src.Type)
		v1.AuxInt = SizeAndAlign(s).Size() - SizeAndAlign(s).Size()%8
		v1.AddArg(src)
		v.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpMove, TypeMem)
		v2.AuxInt = MakeSizeAndAlign(SizeAndAlign(s).Size()-SizeAndAlign(s).Size()%8, 1).Int64()
		v2.AddArg(dst)
		v2.AddArg(src)
		v2.AddArg(mem)
		v.AddArg(v2)
		return true
	}
	// match: (Move [s] dst src mem)
	// cond: SizeAndAlign(s).Size() > 32 || SizeAndAlign(s).Align()%8 != 0
	// result: (LoweredMove [SizeAndAlign(s).Align()] 		dst 		src 		(ADDconst <src.Type> src [SizeAndAlign(s).Size()-moveSize(SizeAndAlign(s).Align(), config)]) 		mem)
	for {
		s := v.AuxInt
		dst := v.Args[0]
		src := v.Args[1]
		mem := v.Args[2]
		if !(SizeAndAlign(s).Size() > 32 || SizeAndAlign(s).Align()%8 != 0) {
			break
		}
		v.reset(OpSPARC64LoweredMove)
		v.AuxInt = SizeAndAlign(s).Align()
		v.AddArg(dst)
		v.AddArg(src)
		v0 := b.NewValue0(v.Line, OpSPARC64ADDconst, src.Type)
		v0.AuxInt = SizeAndAlign(s).Size() - moveSize(SizeAndAlign(s).Align(), config)
		v0.AddArg(src)
		v.AddArg(v0)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpMul16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul16 x y)
	// cond:
	// result: (MULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul32 x y)
	// cond:
	// result: (MULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul32F x y)
	// cond:
	// result: (FMULS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FMULS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul64 x y)
	// cond:
	// result: (MULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul64F x y)
	// cond:
	// result: (FMULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FMULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul8 x y)
	// cond:
	// result: (MULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpNeg16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neg16 x)
	// cond:
	// result: (NEG x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64NEG)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpNeg32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neg32 x)
	// cond:
	// result: (NEG x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64NEG)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpNeg32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neg32F x)
	// cond:
	// result: (FNEGS x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FNEGS)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpNeg64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neg64 x)
	// cond:
	// result: (NEG x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64NEG)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpNeg64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neg64F x)
	// cond:
	// result: (FNEGD x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FNEGD)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpNeg8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neg8 x)
	// cond:
	// result: (NEG x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64NEG)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpNeq16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq16 x y)
	// cond:
	// result: (NotEqual32 (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64NotEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt16to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpNeq32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq32 x y)
	// cond:
	// result: (NotEqual32 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64NotEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpNeq32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq32F x y)
	// cond:
	// result: (NotEqualF (FCMPS x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64NotEqualF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPS, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpNeq64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq64 x y)
	// cond:
	// result: (NotEqual64 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64NotEqual64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpNeq64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq64F x y)
	// cond:
	// result: (NotEqualF (FCMPD x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64NotEqualF)
		v0 := b.NewValue0(v.Line, OpSPARC64FCMPD, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpNeq8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Neq8 x y)
	// cond:
	// result: (NotEqual32 (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64NotEqual32)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v1 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v1.AddArg(x)
		v0.AddArg(v1)
		v2 := b.NewValue0(v.Line, OpZeroExt8to32, config.fe.TypeUInt32())
		v2.AddArg(y)
		v0.AddArg(v2)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpNeqB(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (NeqB x y)
	// cond:
	// result: (XOR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64XOR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpNeqPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (NeqPtr x y)
	// cond:
	// result: (NotEqual64 (CMP x y))
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64NotEqual64)
		v0 := b.NewValue0(v.Line, OpSPARC64CMP, TypeFlags)
		v0.AddArg(x)
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpNilCheck(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (NilCheck ptr mem)
	// cond:
	// result: (LoweredNilCheck ptr mem)
	for {
		ptr := v.Args[0]
		mem := v.Args[1]
		v.reset(OpSPARC64LoweredNilCheck)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
}
func rewriteValueSPARC64_OpNot(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Not x)
	// cond:
	// result: (XORconst [1] x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64XORconst)
		v.AuxInt = 1
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpOffPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (OffPtr [off] ptr:(SP))
	// cond:
	// result: (MOVDaddr [off] ptr)
	for {
		off := v.AuxInt
		ptr := v.Args[0]
		if ptr.Op != OpSP {
			break
		}
		v.reset(OpSPARC64MOVDaddr)
		v.AuxInt = off
		v.AddArg(ptr)
		return true
	}
	// match: (OffPtr [off] ptr)
	// cond:
	// result: (ADDconst [off] ptr)
	for {
		off := v.AuxInt
		ptr := v.Args[0]
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = off
		v.AddArg(ptr)
		return true
	}
}
func rewriteValueSPARC64_OpOr16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Or16 x y)
	// cond:
	// result: (OR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64OR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpOr32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Or32 x y)
	// cond:
	// result: (OR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64OR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpOr64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Or64 x y)
	// cond:
	// result: (OR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64OR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpOr8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Or8 x y)
	// cond:
	// result: (OR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64OR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpOrB(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (OrB x y)
	// cond:
	// result: (OR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64OR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh16Ux16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux16 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt16to64 x) (ZeroExt16to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh16Ux32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux32 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt16to64 x) (ZeroExt32to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh16Ux64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux64 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt16to64 x) y [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh16Ux8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux8  <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt16to64 x) (ZeroExt8to64  y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh16x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x16 x y)
	// cond:
	// result: (SRAmax (SignExt16to64 x) <y.Type> (ZeroExt16to64 y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt16to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh16x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x32 x y)
	// cond:
	// result: (SRAmax (SignExt16to64 x) <y.Type> (ZeroExt32to64 y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt16to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh16x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x64 x y)
	// cond:
	// result: (SRAmax (SignExt16to64 x) <y.Type> y [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt16to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh16x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x8  x y)
	// cond:
	// result: (SRAmax (SignExt16to64 x) <y.Type> (ZeroExt8to64  y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt16to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh32Ux16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux16 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt32to64 x) (ZeroExt16to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh32Ux32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux32 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt32to64 x) (ZeroExt32to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh32Ux64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux64 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt32to64 x) y [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh32Ux8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux8  <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt32to64 x) (ZeroExt8to64  y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh32x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x16 x y)
	// cond:
	// result: (SRAmax (SignExt32to64 x) <y.Type> (ZeroExt16to64 y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt32to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh32x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x32 x y)
	// cond:
	// result: (SRAmax (SignExt32to64 x) <y.Type> (ZeroExt32to64 y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt32to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh32x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x64 x y)
	// cond:
	// result: (SRAmax (SignExt32to64 x) <y.Type> y [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt32to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh32x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x8  x y)
	// cond:
	// result: (SRAmax (SignExt32to64 x) <y.Type> (ZeroExt8to64  y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt32to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh64Ux16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux16 <t> x y)
	// cond:
	// result: (SRLmax <t> x (ZeroExt16to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpRsh64Ux32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux32 <t> x y)
	// cond:
	// result: (SRLmax <t> x (ZeroExt32to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpRsh64Ux64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux64 <t> x y)
	// cond:
	// result: (SRLmax <t> x y [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh64Ux8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux8  <t> x y)
	// cond:
	// result: (SRLmax <t> x (ZeroExt8to64  y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpRsh64x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x16 x y)
	// cond:
	// result: (SRAmax x <y.Type> (ZeroExt16to64 y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpRsh64x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x32 x y)
	// cond:
	// result: (SRAmax x <y.Type> (ZeroExt32to64 y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpRsh64x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x64 x y)
	// cond:
	// result: (SRAmax x <y.Type> y [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh64x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x8  x y)
	// cond:
	// result: (SRAmax x <y.Type> (ZeroExt8to64  y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v.AddArg(x)
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(y)
		v.AddArg(v0)
		return true
	}
}
func rewriteValueSPARC64_OpRsh8Ux16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux16 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt8to64 x) (ZeroExt16to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh8Ux32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux32 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt8to64 x) (ZeroExt32to64 y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh8Ux64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux64 <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt8to64 x) y [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh8Ux8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux8  <t> x y)
	// cond:
	// result: (SRLmax <t> (ZeroExt8to64 x) (ZeroExt8to64  y) [63])
	for {
		t := v.Type
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRLmax)
		v.Type = t
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh8x16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x16 x y)
	// cond:
	// result: (SRAmax (SignExt8to64 x) <y.Type> (ZeroExt16to64 y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt8to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt16to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh8x32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x32 x y)
	// cond:
	// result: (SRAmax (SignExt8to64 x) <y.Type> (ZeroExt32to64 y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt8to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt32to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpRsh8x64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x64 x y)
	// cond:
	// result: (SRAmax (SignExt8to64 x) <y.Type> y [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt8to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpRsh8x8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x8  x y)
	// cond:
	// result: (SRAmax (SignExt8to64 x) <y.Type> (ZeroExt8to64  y) [63])
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SRAmax)
		v.Type = y.Type
		v.AuxInt = 63
		v0 := b.NewValue0(v.Line, OpSignExt8to64, config.fe.TypeInt64())
		v0.AddArg(x)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZeroExt8to64, config.fe.TypeUInt64())
		v1.AddArg(y)
		v.AddArg(v1)
		return true
	}
}
func rewriteValueSPARC64_OpSPARC64ADD(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ADD x (NEG y))
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64NEG {
			break
		}
		y := v_1.Args[0]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	// match: (ADD (NEG y) x)
	// cond:
	// result: (SUB x y)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64NEG {
			break
		}
		y := v_0.Args[0]
		x := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	// match: (ADD (MOVDconst [c]) x)
	// cond:
	// result: (ADDconst [c] x)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_0.AuxInt
		x := v.Args[1]
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (ADD x (MOVDconst [c]))
	// cond:
	// result: (ADDconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (ADD (MOVWconst [c]) x)
	// cond:
	// result: (ADDconst [c] x)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_0.AuxInt
		x := v.Args[1]
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (ADD x (MOVWconst [c]))
	// cond:
	// result: (ADDconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64ADDconst(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ADDconst [off1] (MOVDaddr [off2] {sym} ptr))
	// cond:
	// result: (MOVDaddr [off1+off2] {sym} ptr)
	for {
		off1 := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVDaddr {
			break
		}
		off2 := v_0.AuxInt
		sym := v_0.Aux
		ptr := v_0.Args[0]
		v.reset(OpSPARC64MOVDaddr)
		v.AuxInt = off1 + off2
		v.Aux = sym
		v.AddArg(ptr)
		return true
	}
	// match: (ADDconst [0]  x)
	// cond:
	// result: x
	for {
		if v.AuxInt != 0 {
			break
		}
		x := v.Args[0]
		v.reset(OpCopy)
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	// match: (ADDconst [c] (MOVDconst [d]))
	// cond:
	// result: (MOVDconst [c+d])
	for {
		c := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVDconst {
			break
		}
		d := v_0.AuxInt
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = c + d
		return true
	}
	// match: (ADDconst [c] (MOVWconst [d]))
	// cond:
	// result: (MOVWconst [c+d])
	for {
		c := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVWconst {
			break
		}
		d := v_0.AuxInt
		v.reset(OpSPARC64MOVWconst)
		v.AuxInt = c + d
		return true
	}
	// match: (ADDconst [c] (ADDconst [d] x))
	// cond:
	// result: (ADDconst [c+d] x)
	for {
		c := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64ADDconst {
			break
		}
		d := v_0.AuxInt
		x := v_0.Args[0]
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = c + d
		v.AddArg(x)
		return true
	}
	// match: (ADDconst [c] (SUBconst [d] x))
	// cond:
	// result: (ADDconst [c-d] x)
	for {
		c := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64SUBconst {
			break
		}
		d := v_0.AuxInt
		x := v_0.Args[0]
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = c - d
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64AND(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (AND x x)
	// cond:
	// result: x
	for {
		x := v.Args[0]
		if x != v.Args[1] {
			break
		}
		v.reset(OpCopy)
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	// match: (AND (MOVDconst [c]) x)
	// cond:
	// result: (ANDconst [c] x)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_0.AuxInt
		x := v.Args[1]
		v.reset(OpSPARC64ANDconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (AND x (MOVDconst [c]))
	// cond:
	// result: (ANDconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64ANDconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (AND (MOVWconst [c]) x)
	// cond:
	// result: (ANDconst [c] x)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_0.AuxInt
		x := v.Args[1]
		v.reset(OpSPARC64ANDconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (AND x (MOVWconst [c]))
	// cond:
	// result: (ANDconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64ANDconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64ANDconst(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ANDconst [0]  _)
	// cond:
	// result: (MOVDconst [0])
	for {
		if v.AuxInt != 0 {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (ANDconst [-1] x)
	// cond:
	// result: x
	for {
		if v.AuxInt != -1 {
			break
		}
		x := v.Args[0]
		v.reset(OpCopy)
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64CMP(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (CMP x (MOVDconst [c]))
	// cond: c>-4097 && c<4096
	// result: (CMPconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(c > -4097 && c < 4096) {
			break
		}
		v.reset(OpSPARC64CMPconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (CMP x (MOVWconst [c]))
	// cond: c>-4097 && c<4096
	// result: (CMPconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_1.AuxInt
		if !(c > -4097 && c < 4096) {
			break
		}
		v.reset(OpSPARC64CMPconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64MOVBstore(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVBstore [off] {sym} ptr (MOVWconst [0]) mem)
	// cond:
	// result: (MOVBstorezero [off] {sym} ptr mem)
	for {
		off := v.AuxInt
		sym := v.Aux
		ptr := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		if v_1.AuxInt != 0 {
			break
		}
		mem := v.Args[2]
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = off
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (MOVBstore [off] {sym} ptr (MOVDconst [0]) mem)
	// cond:
	// result: (MOVBstorezero [off] {sym} ptr mem)
	for {
		off := v.AuxInt
		sym := v.Aux
		ptr := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		if v_1.AuxInt != 0 {
			break
		}
		mem := v.Args[2]
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = off
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64MOVBstorezero(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVBstorezero [off1] {sym} (ADDconst [off2] ptr) mem)
	// cond:
	// result: (MOVBstorezero [off1+off2] {sym} ptr mem)
	for {
		off1 := v.AuxInt
		sym := v.Aux
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64ADDconst {
			break
		}
		off2 := v_0.AuxInt
		ptr := v_0.Args[0]
		mem := v.Args[1]
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = off1 + off2
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64MOVDstore(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVDstore [off] {sym} ptr (MOVWconst [0]) mem)
	// cond:
	// result: (MOVDstorezero [off] {sym} ptr mem)
	for {
		off := v.AuxInt
		sym := v.Aux
		ptr := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		if v_1.AuxInt != 0 {
			break
		}
		mem := v.Args[2]
		v.reset(OpSPARC64MOVDstorezero)
		v.AuxInt = off
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (MOVDstore [off] {sym} ptr (MOVDconst [0]) mem)
	// cond:
	// result: (MOVDstorezero [off] {sym} ptr mem)
	for {
		off := v.AuxInt
		sym := v.Aux
		ptr := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		if v_1.AuxInt != 0 {
			break
		}
		mem := v.Args[2]
		v.reset(OpSPARC64MOVDstorezero)
		v.AuxInt = off
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64MOVDstorezero(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVDstorezero [off1] {sym} (ADDconst [off2] ptr) mem)
	// cond: (off1+off2)%8==0 || off1+off2<4096 && off1+off2>-4097 && !isArg(sym) && !isAuto(sym)
	// result: (MOVDstorezero [off1+off2] {sym} ptr mem)
	for {
		off1 := v.AuxInt
		sym := v.Aux
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64ADDconst {
			break
		}
		off2 := v_0.AuxInt
		ptr := v_0.Args[0]
		mem := v.Args[1]
		if !((off1+off2)%8 == 0 || off1+off2 < 4096 && off1+off2 > -4097 && !isArg(sym) && !isAuto(sym)) {
			break
		}
		v.reset(OpSPARC64MOVDstorezero)
		v.AuxInt = off1 + off2
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64MOVHstore(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVHstore [off] {sym} ptr (MOVWconst [0]) mem)
	// cond:
	// result: (MOVHstorezero [off] {sym} ptr mem)
	for {
		off := v.AuxInt
		sym := v.Aux
		ptr := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		if v_1.AuxInt != 0 {
			break
		}
		mem := v.Args[2]
		v.reset(OpSPARC64MOVHstorezero)
		v.AuxInt = off
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (MOVHstore [off] {sym} ptr (MOVDconst [0]) mem)
	// cond:
	// result: (MOVHstorezero [off] {sym} ptr mem)
	for {
		off := v.AuxInt
		sym := v.Aux
		ptr := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		if v_1.AuxInt != 0 {
			break
		}
		mem := v.Args[2]
		v.reset(OpSPARC64MOVHstorezero)
		v.AuxInt = off
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64MOVHstorezero(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVHstorezero [off1] {sym} (ADDconst [off2] ptr) mem)
	// cond: (off1+off2)%2==0 || off1+off2<4096 && off1+off2>-4097 && !isArg(sym) && !isAuto(sym)
	// result: (MOVHstorezero [off1+off2] {sym} ptr mem)
	for {
		off1 := v.AuxInt
		sym := v.Aux
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64ADDconst {
			break
		}
		off2 := v_0.AuxInt
		ptr := v_0.Args[0]
		mem := v.Args[1]
		if !((off1+off2)%2 == 0 || off1+off2 < 4096 && off1+off2 > -4097 && !isArg(sym) && !isAuto(sym)) {
			break
		}
		v.reset(OpSPARC64MOVHstorezero)
		v.AuxInt = off1 + off2
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64MOVWstore(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVWstore [off] {sym} ptr (MOVWconst [0]) mem)
	// cond:
	// result: (MOVWstorezero [off] {sym} ptr mem)
	for {
		off := v.AuxInt
		sym := v.Aux
		ptr := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		if v_1.AuxInt != 0 {
			break
		}
		mem := v.Args[2]
		v.reset(OpSPARC64MOVWstorezero)
		v.AuxInt = off
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (MOVWstore [off] {sym} ptr (MOVDconst [0]) mem)
	// cond:
	// result: (MOVWstorezero [off] {sym} ptr mem)
	for {
		off := v.AuxInt
		sym := v.Aux
		ptr := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		if v_1.AuxInt != 0 {
			break
		}
		mem := v.Args[2]
		v.reset(OpSPARC64MOVWstorezero)
		v.AuxInt = off
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64MOVWstorezero(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (MOVWstorezero [off1] {sym} (ADDconst [off2] ptr) mem)
	// cond: (off1+off2)%4==0 || off1+off2<4096 && off1+off2>-4097 && !isArg(sym) && !isAuto(sym)
	// result: (MOVWstorezero [off1+off2] {sym} ptr mem)
	for {
		off1 := v.AuxInt
		sym := v.Aux
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64ADDconst {
			break
		}
		off2 := v_0.AuxInt
		ptr := v_0.Args[0]
		mem := v.Args[1]
		if !((off1+off2)%4 == 0 || off1+off2 < 4096 && off1+off2 > -4097 && !isArg(sym) && !isAuto(sym)) {
			break
		}
		v.reset(OpSPARC64MOVWstorezero)
		v.AuxInt = off1 + off2
		v.Aux = sym
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64OR(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (OR  x x)
	// cond:
	// result: x
	for {
		x := v.Args[0]
		if x != v.Args[1] {
			break
		}
		v.reset(OpCopy)
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	// match: (OR  (MOVDconst [c]) x)
	// cond:
	// result: (ORconst  [c] x)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_0.AuxInt
		x := v.Args[1]
		v.reset(OpSPARC64ORconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (OR  x (MOVDconst [c]))
	// cond:
	// result: (ORconst  [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64ORconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (OR  (MOVWconst [c]) x)
	// cond:
	// result: (ORconst  [c] x)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_0.AuxInt
		x := v.Args[1]
		v.reset(OpSPARC64ORconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (OR  x (MOVWconst [c]))
	// cond:
	// result: (ORconst  [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64ORconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64ORconst(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ORconst  [0]  x)
	// cond:
	// result: x
	for {
		if v.AuxInt != 0 {
			break
		}
		x := v.Args[0]
		v.reset(OpCopy)
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	// match: (ORconst  [-1] _)
	// cond:
	// result: (MOVDconst [-1])
	for {
		if v.AuxInt != -1 {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = -1
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64SLLmax(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SLLmax x (MOVDconst [c]))
	// cond: is64BitInt(x.Type) && uint64(c) < 64
	// result: (SLLconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is64BitInt(x.Type) && uint64(c) < 64) {
			break
		}
		v.reset(OpSPARC64SLLconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SLLmax x (MOVDconst [c]))
	// cond: is32BitInt(x.Type) && uint64(c) < 32
	// result: (SLLconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is32BitInt(x.Type) && uint64(c) < 32) {
			break
		}
		v.reset(OpSPARC64SLLconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SLLmax x (MOVDconst [c]))
	// cond: is16BitInt(x.Type) && uint64(c) < 16
	// result: (SLLconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is16BitInt(x.Type) && uint64(c) < 16) {
			break
		}
		v.reset(OpSPARC64SLLconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SLLmax x (MOVDconst [c]))
	// cond: is8BitInt(x.Type) && uint64(c) < 8
	// result: (SLLconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is8BitInt(x.Type) && uint64(c) < 8) {
			break
		}
		v.reset(OpSPARC64SLLconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SLLmax x (MOVDconst [c]))
	// cond: is64BitInt(x.Type) && uint64(c) >= 64
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is64BitInt(x.Type) && uint64(c) >= 64) {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (SLLmax x (MOVDconst [c]))
	// cond: is32BitInt(x.Type) && uint64(c) >= 32
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is32BitInt(x.Type) && uint64(c) >= 32) {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (SLLmax x (MOVDconst [c]))
	// cond: is16BitInt(x.Type) && uint64(c) >= 16
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is16BitInt(x.Type) && uint64(c) >= 16) {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (SLLmax x (MOVDconst [c]))
	// cond: is8BitInt(x.Type) && uint64(c) >= 8
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is8BitInt(x.Type) && uint64(c) >= 8) {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64SRAmax(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SRAmax (SignExt32to64 x) (MOVDconst [c]))
	// cond: uint64(c) < 32
	// result: (SRAconst x [c])
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSignExt32to64 {
			break
		}
		x := v_0.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(uint64(c) < 32) {
			break
		}
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SRAmax (SignExt16to64 x) (MOVDconst [c]))
	// cond: uint64(c) < 16
	// result: (SRAconst x [c])
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSignExt16to64 {
			break
		}
		x := v_0.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(uint64(c) < 16) {
			break
		}
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SRAmax (SignExt8to64 x) (MOVDconst [c]))
	// cond: uint64(c) < 8
	// result: (SRAconst x [c])
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSignExt8to64 {
			break
		}
		x := v_0.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(uint64(c) < 8) {
			break
		}
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SRAmax (SignExt32to64 x) (MOVDconst [c]))
	// cond: uint64(c) >= 32
	// result: (SRAconst x [63])
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSignExt32to64 {
			break
		}
		x := v_0.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(uint64(c) >= 32) {
			break
		}
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = 63
		v.AddArg(x)
		return true
	}
	// match: (SRAmax (SignExt16to64 x) (MOVDconst [c]))
	// cond: uint64(c) >= 16
	// result: (SRAconst x [63])
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSignExt16to64 {
			break
		}
		x := v_0.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(uint64(c) >= 16) {
			break
		}
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = 63
		v.AddArg(x)
		return true
	}
	// match: (SRAmax (SignExt8to64 x) (MOVDconst [c]))
	// cond: uint64(c) >= 8
	// result: (SRAconst x [63])
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSignExt8to64 {
			break
		}
		x := v_0.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(uint64(c) >= 8) {
			break
		}
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = 63
		v.AddArg(x)
		return true
	}
	// match: (SRAmax x (MOVDconst [c]))
	// cond: uint64(c) < 64
	// result: (SRAconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(uint64(c) < 64) {
			break
		}
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SRAmax x (MOVDconst [c]))
	// cond: uint64(c) >= 64
	// result: (SRAconst x [63])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(uint64(c) >= 64) {
			break
		}
		v.reset(OpSPARC64SRAconst)
		v.AuxInt = 63
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64SRLmax(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SRLmax x (MOVDconst [c]))
	// cond: is64BitInt(x.Type) && uint64(c) < 64
	// result: (SRLconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is64BitInt(x.Type) && uint64(c) < 64) {
			break
		}
		v.reset(OpSPARC64SRLconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SRLmax x (MOVDconst [c]))
	// cond: is32BitInt(x.Type) && uint64(c) < 32
	// result: (SRLconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is32BitInt(x.Type) && uint64(c) < 32) {
			break
		}
		v.reset(OpSPARC64SRLconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SRLmax x (MOVDconst [c]))
	// cond: is16BitInt(x.Type) && uint64(c) < 16
	// result: (SRLconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is16BitInt(x.Type) && uint64(c) < 16) {
			break
		}
		v.reset(OpSPARC64SRLconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SRLmax x (MOVDconst [c]))
	// cond: is8BitInt(x.Type) && uint64(c) < 8
	// result: (SRLconst x [c])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is8BitInt(x.Type) && uint64(c) < 8) {
			break
		}
		v.reset(OpSPARC64SRLconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SRLmax x (MOVDconst [c]))
	// cond: is64BitInt(x.Type) && uint64(c) >= 64
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is64BitInt(x.Type) && uint64(c) >= 64) {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (SRLmax x (MOVDconst [c]))
	// cond: is32BitInt(x.Type) && uint64(c) >= 32
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is32BitInt(x.Type) && uint64(c) >= 32) {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (SRLmax x (MOVDconst [c]))
	// cond: is16BitInt(x.Type) && uint64(c) >= 16
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is16BitInt(x.Type) && uint64(c) >= 16) {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (SRLmax x (MOVDconst [c]))
	// cond: is8BitInt(x.Type) && uint64(c) >= 8
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		if !(is8BitInt(x.Type) && uint64(c) >= 8) {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64SUB(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SUB x x)
	// cond:
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		if x != v.Args[1] {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (SUB x (MOVDconst [c]))
	// cond:
	// result: (SUBconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64SUBconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (SUB x (MOVWconst [c]))
	// cond:
	// result: (SUBconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64SUBconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64SUBconst(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SUBconst [0]  x)
	// cond:
	// result: x
	for {
		if v.AuxInt != 0 {
			break
		}
		x := v.Args[0]
		v.reset(OpCopy)
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	// match: (SUBconst [c] (MOVDconst [d]))
	// cond:
	// result: (MOVDconst [d-c])
	for {
		c := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVDconst {
			break
		}
		d := v_0.AuxInt
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = d - c
		return true
	}
	// match: (SUBconst [c] (MOVWconst [d]))
	// cond:
	// result: (MOVWconst [d-c])
	for {
		c := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVWconst {
			break
		}
		d := v_0.AuxInt
		v.reset(OpSPARC64MOVWconst)
		v.AuxInt = d - c
		return true
	}
	// match: (SUBconst [c] (SUBconst [d] x))
	// cond:
	// result: (ADDconst [-c-d] x)
	for {
		c := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64SUBconst {
			break
		}
		d := v_0.AuxInt
		x := v_0.Args[0]
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = -c - d
		v.AddArg(x)
		return true
	}
	// match: (SUBconst [c] (ADDconst [d] x))
	// cond:
	// result: (ADDconst [-c+d] x)
	for {
		c := v.AuxInt
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64ADDconst {
			break
		}
		d := v_0.AuxInt
		x := v_0.Args[0]
		v.reset(OpSPARC64ADDconst)
		v.AuxInt = -c + d
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64XOR(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (XOR x x)
	// cond:
	// result: (MOVDconst [0])
	for {
		x := v.Args[0]
		if x != v.Args[1] {
			break
		}
		v.reset(OpSPARC64MOVDconst)
		v.AuxInt = 0
		return true
	}
	// match: (XOR (MOVDconst [c]) x)
	// cond:
	// result: (XORconst [c] x)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_0.AuxInt
		x := v.Args[1]
		v.reset(OpSPARC64XORconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (XOR x (MOVDconst [c]))
	// cond:
	// result: (XORconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVDconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64XORconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (XOR (MOVWconst [c]) x)
	// cond:
	// result: (XORconst [c] x)
	for {
		v_0 := v.Args[0]
		if v_0.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_0.AuxInt
		x := v.Args[1]
		v.reset(OpSPARC64XORconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	// match: (XOR x (MOVWconst [c]))
	// cond:
	// result: (XORconst [c] x)
	for {
		x := v.Args[0]
		v_1 := v.Args[1]
		if v_1.Op != OpSPARC64MOVWconst {
			break
		}
		c := v_1.AuxInt
		v.reset(OpSPARC64XORconst)
		v.AuxInt = c
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSPARC64XORconst(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (XORconst [0]  x)
	// cond:
	// result: x
	for {
		if v.AuxInt != 0 {
			break
		}
		x := v.Args[0]
		v.reset(OpCopy)
		v.Type = x.Type
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSignExt16to32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SignExt16to32 x)
	// cond:
	// result: (MOVHreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVHreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpSignExt16to64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SignExt16to64 x)
	// cond:
	// result: (MOVHreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVHreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpSignExt32to64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SignExt32to64 x)
	// cond:
	// result: (MOVWreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVWreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpSignExt8to16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SignExt8to16  x)
	// cond:
	// result: (MOVBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpSignExt8to32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SignExt8to32  x)
	// cond:
	// result: (MOVBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpSignExt8to64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SignExt8to64  x)
	// cond:
	// result: (MOVBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpSqrt(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sqrt x)
	// cond:
	// result: (FSQRTD x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64FSQRTD)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpStaticCall(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (StaticCall [argwid] {target} mem)
	// cond:
	// result: (CALLstatic [argwid] {target} mem)
	for {
		argwid := v.AuxInt
		target := v.Aux
		mem := v.Args[0]
		v.reset(OpSPARC64CALLstatic)
		v.AuxInt = argwid
		v.Aux = target
		v.AddArg(mem)
		return true
	}
}
func rewriteValueSPARC64_OpStore(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Store [1] ptr val mem)
	// cond:
	// result: (MOVBstore ptr val mem)
	for {
		if v.AuxInt != 1 {
			break
		}
		ptr := v.Args[0]
		val := v.Args[1]
		mem := v.Args[2]
		v.reset(OpSPARC64MOVBstore)
		v.AddArg(ptr)
		v.AddArg(val)
		v.AddArg(mem)
		return true
	}
	// match: (Store [2] ptr val mem)
	// cond:
	// result: (MOVHstore ptr val mem)
	for {
		if v.AuxInt != 2 {
			break
		}
		ptr := v.Args[0]
		val := v.Args[1]
		mem := v.Args[2]
		v.reset(OpSPARC64MOVHstore)
		v.AddArg(ptr)
		v.AddArg(val)
		v.AddArg(mem)
		return true
	}
	// match: (Store [4] ptr val mem)
	// cond: !is32BitFloat(val.Type)
	// result: (MOVWstore ptr val mem)
	for {
		if v.AuxInt != 4 {
			break
		}
		ptr := v.Args[0]
		val := v.Args[1]
		mem := v.Args[2]
		if !(!is32BitFloat(val.Type)) {
			break
		}
		v.reset(OpSPARC64MOVWstore)
		v.AddArg(ptr)
		v.AddArg(val)
		v.AddArg(mem)
		return true
	}
	// match: (Store [8] ptr val mem)
	// cond: !is64BitFloat(val.Type)
	// result: (MOVDstore ptr val mem)
	for {
		if v.AuxInt != 8 {
			break
		}
		ptr := v.Args[0]
		val := v.Args[1]
		mem := v.Args[2]
		if !(!is64BitFloat(val.Type)) {
			break
		}
		v.reset(OpSPARC64MOVDstore)
		v.AddArg(ptr)
		v.AddArg(val)
		v.AddArg(mem)
		return true
	}
	// match: (Store [4] ptr val mem)
	// cond: is32BitFloat(val.Type)
	// result: (FMOVSstore ptr val mem)
	for {
		if v.AuxInt != 4 {
			break
		}
		ptr := v.Args[0]
		val := v.Args[1]
		mem := v.Args[2]
		if !(is32BitFloat(val.Type)) {
			break
		}
		v.reset(OpSPARC64FMOVSstore)
		v.AddArg(ptr)
		v.AddArg(val)
		v.AddArg(mem)
		return true
	}
	// match: (Store [8] ptr val mem)
	// cond: is64BitFloat(val.Type)
	// result: (FMOVDstore ptr val mem)
	for {
		if v.AuxInt != 8 {
			break
		}
		ptr := v.Args[0]
		val := v.Args[1]
		mem := v.Args[2]
		if !(is64BitFloat(val.Type)) {
			break
		}
		v.reset(OpSPARC64FMOVDstore)
		v.AddArg(ptr)
		v.AddArg(val)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpSub16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub16 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub32 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub32F x y)
	// cond:
	// result: (FSUBS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FSUBS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub64 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub64F x y)
	// cond:
	// result: (FSUBD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FSUBD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub8 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSubPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SubPtr x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpTrunc16to8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Trunc16to8  x)
	// cond:
	// result: (MOVBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpTrunc32to16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Trunc32to16 x)
	// cond:
	// result: (MOVHreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVHreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpTrunc32to8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Trunc32to8  x)
	// cond:
	// result: (MOVBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpTrunc64to16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Trunc64to16 x)
	// cond:
	// result: (MOVHreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVHreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpTrunc64to32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Trunc64to32 x)
	// cond:
	// result: (MOVWreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVWreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpTrunc64to8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Trunc64to8  x)
	// cond:
	// result: (MOVBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpXor16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Xor16 x y)
	// cond:
	// result: (XOR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64XOR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpXor32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Xor32 x y)
	// cond:
	// result: (XOR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64XOR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpXor64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Xor64 x y)
	// cond:
	// result: (XOR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64XOR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpXor8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Xor8 x y)
	// cond:
	// result: (XOR x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64XOR)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpZero(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Zero [s] _ mem)
	// cond: SizeAndAlign(s).Size() == 0
	// result: mem
	for {
		s := v.AuxInt
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 0) {
			break
		}
		v.reset(OpCopy)
		v.Type = mem.Type
		v.AddArg(mem)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 1
	// result: (MOVBstorezero ptr mem)
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 1) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 2 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVHstorezero ptr mem)
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 2 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstorezero)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 2
	// result: (MOVBstorezero [1] ptr 		(MOVBstorezero [0] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 2) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 1
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 4 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVWstorezero ptr mem)
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 4 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVWstorezero)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 4 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVHstorezero [2] ptr 		(MOVHstorezero [0] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 4 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstorezero)
		v.AuxInt = 2
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 4
	// result: (MOVBstorezero [3] ptr 		(MOVBstorezero [2] ptr 			(MOVBstorezero [1] ptr 				(MOVBstorezero [0] ptr mem))))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 4) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 3
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v0.AuxInt = 2
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v1.AuxInt = 1
		v1.AddArg(ptr)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v2.AuxInt = 0
		v2.AddArg(ptr)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVDstorezero ptr mem)
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVDstorezero)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVWstorezero [4] ptr 		(MOVWstorezero [0] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVWstorezero)
		v.AuxInt = 4
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVWstorezero, TypeMem)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVHstorezero [6] ptr 		(MOVHstorezero [4] ptr 			(MOVHstorezero [2] ptr 				(MOVHstorezero [0] ptr mem))))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 8 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstorezero)
		v.AuxInt = 6
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v0.AuxInt = 4
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v1.AuxInt = 2
		v1.AddArg(ptr)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v2.AuxInt = 0
		v2.AddArg(ptr)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 3 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVBstorezero [2] ptr 		(MOVHstorezero [0] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 3 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 2
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 3
	// result: (MOVBstorezero [2] ptr 		(MOVBstorezero [1] ptr 			(MOVBstorezero [0] ptr mem)))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 3) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 2
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v0.AuxInt = 1
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v1.AuxInt = 0
		v1.AddArg(ptr)
		v1.AddArg(mem)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 5 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVBstorezero [4] ptr 		(MOVWstorezero [0] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 5 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 4
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVWstorezero, TypeMem)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 5 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVBstorezero [4] ptr 		(MOVHstorezero [2] ptr 			(MOVHstorezero [0] ptr mem)))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 5 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 4
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v0.AuxInt = 2
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v1.AuxInt = 0
		v1.AddArg(ptr)
		v1.AddArg(mem)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 5
	// result: (MOVBstorezero [4] ptr 		(MOVBstorezero [3] ptr 			(MOVBstorezero [2] ptr 				(MOVBstorezero [1] ptr 					(MOVBstorezero [0] ptr mem)))))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 5) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 4
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v0.AuxInt = 3
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v1.AuxInt = 2
		v1.AddArg(ptr)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v2.AuxInt = 1
		v2.AddArg(ptr)
		v3 := b.NewValue0(v.Line, OpSPARC64MOVBstorezero, TypeMem)
		v3.AuxInt = 0
		v3.AddArg(ptr)
		v3.AddArg(mem)
		v2.AddArg(v3)
		v1.AddArg(v2)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 6 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVHstorezero [4] ptr 		(MOVWstorezero [0] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 6 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstorezero)
		v.AuxInt = 4
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVWstorezero, TypeMem)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 6 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVHstorezero [4] ptr 		(MOVHstorezero [2] ptr 			(MOVHstorezero [0] ptr mem)))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 6 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVHstorezero)
		v.AuxInt = 4
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v0.AuxInt = 2
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v1.AuxInt = 0
		v1.AddArg(ptr)
		v1.AddArg(mem)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 7 && SizeAndAlign(s).Align()%4 == 0
	// result: (MOVBstorezero [6] ptr 		(MOVHstorezero [4] ptr 			(MOVWstorezero [0] ptr mem)))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 7 && SizeAndAlign(s).Align()%4 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 6
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v0.AuxInt = 4
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVWstorezero, TypeMem)
		v1.AuxInt = 0
		v1.AddArg(ptr)
		v1.AddArg(mem)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 7 && SizeAndAlign(s).Align()%2 == 0
	// result: (MOVBstorezero [6] ptr 		(MOVHstorezero [4] ptr 			(MOVHstorezero [2] ptr 				(MOVHstorezero [0] ptr mem))))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 7 && SizeAndAlign(s).Align()%2 == 0) {
			break
		}
		v.reset(OpSPARC64MOVBstorezero)
		v.AuxInt = 6
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v0.AuxInt = 4
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v1.AuxInt = 2
		v1.AddArg(ptr)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVHstorezero, TypeMem)
		v2.AuxInt = 0
		v2.AddArg(ptr)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 12 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVWstorezero [8] ptr 		(MOVDstorezero [0] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 12 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVWstorezero)
		v.AuxInt = 8
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDstorezero, TypeMem)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 16 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVDstorezero [8] ptr 		(MOVDstorezero [0] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 16 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVDstorezero)
		v.AuxInt = 8
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDstorezero, TypeMem)
		v0.AuxInt = 0
		v0.AddArg(ptr)
		v0.AddArg(mem)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 24 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVDstorezero [16] ptr 		(MOVDstorezero [8] ptr 			(MOVDstorezero [0] ptr mem)))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 24 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVDstorezero)
		v.AuxInt = 16
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDstorezero, TypeMem)
		v0.AuxInt = 8
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVDstorezero, TypeMem)
		v1.AuxInt = 0
		v1.AddArg(ptr)
		v1.AddArg(mem)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() == 32 && SizeAndAlign(s).Align()%8 == 0
	// result: (MOVDstorezero [24] ptr 		(MOVDstorezero [16] ptr 			(MOVDstorezero [8] ptr 				(MOVDstorezero [0] ptr mem))))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() == 32 && SizeAndAlign(s).Align()%8 == 0) {
			break
		}
		v.reset(OpSPARC64MOVDstorezero)
		v.AuxInt = 24
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64MOVDstorezero, TypeMem)
		v0.AuxInt = 16
		v0.AddArg(ptr)
		v1 := b.NewValue0(v.Line, OpSPARC64MOVDstorezero, TypeMem)
		v1.AuxInt = 8
		v1.AddArg(ptr)
		v2 := b.NewValue0(v.Line, OpSPARC64MOVDstorezero, TypeMem)
		v2.AuxInt = 0
		v2.AddArg(ptr)
		v2.AddArg(mem)
		v1.AddArg(v2)
		v0.AddArg(v1)
		v.AddArg(v0)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size()%8 != 0 && SizeAndAlign(s).Size() > 8
	// result: (Zero [MakeSizeAndAlign(SizeAndAlign(s).Size()%8, 1).Int64()] 		(OffPtr <ptr.Type> ptr [SizeAndAlign(s).Size()-SizeAndAlign(s).Size()%8]) 		(Zero [MakeSizeAndAlign(SizeAndAlign(s).Size()-SizeAndAlign(s).Size()%8, 1).Int64()] ptr mem))
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size()%8 != 0 && SizeAndAlign(s).Size() > 8) {
			break
		}
		v.reset(OpZero)
		v.AuxInt = MakeSizeAndAlign(SizeAndAlign(s).Size()%8, 1).Int64()
		v0 := b.NewValue0(v.Line, OpOffPtr, ptr.Type)
		v0.AuxInt = SizeAndAlign(s).Size() - SizeAndAlign(s).Size()%8
		v0.AddArg(ptr)
		v.AddArg(v0)
		v1 := b.NewValue0(v.Line, OpZero, TypeMem)
		v1.AuxInt = MakeSizeAndAlign(SizeAndAlign(s).Size()-SizeAndAlign(s).Size()%8, 1).Int64()
		v1.AddArg(ptr)
		v1.AddArg(mem)
		v.AddArg(v1)
		return true
	}
	// match: (Zero [s] ptr mem)
	// cond: SizeAndAlign(s).Size() > 32 || SizeAndAlign(s).Align()%8 != 0
	// result: (LoweredZero [SizeAndAlign(s).Align()] 		ptr 		(ADDconst <ptr.Type> [SizeAndAlign(s).Size()-moveSize(SizeAndAlign(s).Align(), config)] ptr) 		mem)
	for {
		s := v.AuxInt
		ptr := v.Args[0]
		mem := v.Args[1]
		if !(SizeAndAlign(s).Size() > 32 || SizeAndAlign(s).Align()%8 != 0) {
			break
		}
		v.reset(OpSPARC64LoweredZero)
		v.AuxInt = SizeAndAlign(s).Align()
		v.AddArg(ptr)
		v0 := b.NewValue0(v.Line, OpSPARC64ADDconst, ptr.Type)
		v0.AuxInt = SizeAndAlign(s).Size() - moveSize(SizeAndAlign(s).Align(), config)
		v0.AddArg(ptr)
		v.AddArg(v0)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueSPARC64_OpZeroExt16to32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt16to32 x)
	// cond:
	// result: (MOVUHreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVUHreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpZeroExt16to64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt16to64 x)
	// cond:
	// result: (MOVUHreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVUHreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpZeroExt32to64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt32to64 x)
	// cond:
	// result: (MOVUWreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVUWreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpZeroExt8to16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt8to16  x)
	// cond:
	// result: (MOVUBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVUBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpZeroExt8to32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt8to32  x)
	// cond:
	// result: (MOVUBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVUBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteValueSPARC64_OpZeroExt8to64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt8to64  x)
	// cond:
	// result: (MOVUBreg x)
	for {
		x := v.Args[0]
		v.reset(OpSPARC64MOVUBreg)
		v.AddArg(x)
		return true
	}
}
func rewriteBlockSPARC64(b *Block, config *Config) bool {
	switch b.Kind {
	case BlockIf:
		// match: (If (Equal32 cc) yes no)
		// cond:
		// result: (EW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64Equal32 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64EW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (NotEqual32 cc) yes no)
		// cond:
		// result: (NEW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64NotEqual32 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64NEW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessThan32 cc) yes no)
		// cond:
		// result: (LW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessThan32 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessThan32U cc) yes no)
		// cond:
		// result: (CSW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessThan32U {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64CSW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessEqual32 cc) yes no)
		// cond:
		// result: (LEW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessEqual32 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LEW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessEqual32U cc) yes no)
		// cond:
		// result: (LEUW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessEqual32U {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LEUW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterThan32 cc) yes no)
		// cond:
		// result: (GW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterThan32 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterThan32U cc) yes no)
		// cond:
		// result: (GUW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterThan32U {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GUW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterEqual32 cc) yes no)
		// cond:
		// result: (GEW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterEqual32 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GEW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterEqual32U cc) yes no)
		// cond:
		// result: (CCW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterEqual32U {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64CCW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (Equal64 cc) yes no)
		// cond:
		// result: (ED cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64Equal64 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64ED
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (NotEqual64 cc) yes no)
		// cond:
		// result: (NED cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64NotEqual64 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64NED
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessThan64 cc) yes no)
		// cond:
		// result: (LD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessThan64 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessThan64U cc) yes no)
		// cond:
		// result: (CSD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessThan64U {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64CSD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessEqual64 cc) yes no)
		// cond:
		// result: (LED cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessEqual64 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LED
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessEqual64U cc) yes no)
		// cond:
		// result: (LEUD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessEqual64U {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LEUD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterThan64 cc) yes no)
		// cond:
		// result: (GD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterThan64 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterThan64U cc) yes no)
		// cond:
		// result: (GUD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterThan64U {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GUD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterEqual64 cc) yes no)
		// cond:
		// result: (GED cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterEqual64 {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GED
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterEqual64U cc) yes no)
		// cond:
		// result: (CCD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterEqual64U {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64CCD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (EqualF cc) yes no)
		// cond:
		// result: (EF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64EqualF {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64EF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (NotEqualF cc) yes no)
		// cond:
		// result: (NEF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64NotEqualF {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64NEF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessThanF cc) yes no)
		// cond:
		// result: (LF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessThanF {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (LessEqualF cc) yes no)
		// cond:
		// result: (LEF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64LessEqualF {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LEF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterThanF cc) yes no)
		// cond:
		// result: (GF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterThanF {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If (GreaterEqualF cc) yes no)
		// cond:
		// result: (GEF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64GreaterEqualF {
				break
			}
			cc := v.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GEF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (If cond yes no)
		// cond:
		// result: (NEW (CMPconst [0] cond) yes no)
		for {
			v := b.Control
			_ = v
			cond := b.Control
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64NEW
			v0 := b.NewValue0(v.Line, OpSPARC64CMPconst, TypeFlags)
			v0.AuxInt = 0
			v0.AddArg(cond)
			b.SetControl(v0)
			_ = yes
			_ = no
			return true
		}
	case BlockSPARC64NEW:
		// match: (NEW (CMPconst [0] (Equal32 cc)) yes no)
		// cond:
		// result: (EW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64Equal32 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64EW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (NotEqual32 cc)) yes no)
		// cond:
		// result: (NEW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64NotEqual32 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64NEW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessThan32 cc)) yes no)
		// cond:
		// result: (LW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessThan32 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessThan32U cc)) yes no)
		// cond:
		// result: (CSW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessThan32U {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64CSW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessEqual32 cc)) yes no)
		// cond:
		// result: (LEW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessEqual32 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LEW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessEqual32U cc)) yes no)
		// cond:
		// result: (LEUW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessEqual32U {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LEUW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterThan32 cc)) yes no)
		// cond:
		// result: (GW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterThan32 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterThan32U cc)) yes no)
		// cond:
		// result: (GUW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterThan32U {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GUW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterEqual32 cc)) yes no)
		// cond:
		// result: (GEW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterEqual32 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GEW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterEqual32U cc)) yes no)
		// cond:
		// result: (CCW cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterEqual32U {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64CCW
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (Equal64 cc)) yes no)
		// cond:
		// result: (ED cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64Equal64 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64ED
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (NotEqual64 cc)) yes no)
		// cond:
		// result: (NED cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64NotEqual64 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64NED
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessThan64 cc)) yes no)
		// cond:
		// result: (LD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessThan64 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessThan64U cc)) yes no)
		// cond:
		// result: (CSD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessThan64U {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64CSD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessEqual64 cc)) yes no)
		// cond:
		// result: (LED cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessEqual64 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LED
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessEqual64U cc)) yes no)
		// cond:
		// result: (LEUD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessEqual64U {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LEUD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterThan64 cc)) yes no)
		// cond:
		// result: (GD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterThan64 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterThan64U cc)) yes no)
		// cond:
		// result: (GUD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterThan64U {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GUD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterEqual64 cc)) yes no)
		// cond:
		// result: (GED cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterEqual64 {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GED
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterEqual64U cc)) yes no)
		// cond:
		// result: (CCD cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterEqual64U {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64CCD
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (EqualF cc)) yes no)
		// cond:
		// result: (EF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64EqualF {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64EF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (NotEqualF cc)) yes no)
		// cond:
		// result: (NEF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64NotEqualF {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64NEF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessThanF cc)) yes no)
		// cond:
		// result: (LF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessThanF {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (LessEqualF cc)) yes no)
		// cond:
		// result: (LEF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64LessEqualF {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64LEF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterThanF cc)) yes no)
		// cond:
		// result: (GF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterThanF {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
		// match: (NEW (CMPconst [0] (GreaterEqualF cc)) yes no)
		// cond:
		// result: (GEF cc yes no)
		for {
			v := b.Control
			if v.Op != OpSPARC64CMPconst {
				break
			}
			if v.AuxInt != 0 {
				break
			}
			v_0 := v.Args[0]
			if v_0.Op != OpSPARC64GreaterEqualF {
				break
			}
			cc := v_0.Args[0]
			yes := b.Succs[0]
			no := b.Succs[1]
			b.Kind = BlockSPARC64GEF
			b.SetControl(cc)
			_ = yes
			_ = no
			return true
		}
	}
	return false
}
