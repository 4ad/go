// autogenerated from gen/SPARC64.rules: do not edit!
// generated with: cd gen; go run *.go

package ssa

import "math"

var _ = math.MinInt8 // in case not otherwise used
func rewriteValueSPARC64(v *Value, config *Config) bool {
	switch v.Op {
	case OpAdd16:
		return rewriteValueSPARC64_OpAdd16(v, config)
	case OpAdd32:
		return rewriteValueSPARC64_OpAdd32(v, config)
	case OpAdd32F:
		return rewriteValueSPARC64_OpAdd32F(v, config)
	case OpAdd64:
		return rewriteValueSPARC64_OpAdd64(v, config)
	case OpAdd64F:
		return rewriteValueSPARC64_OpAdd64F(v, config)
	case OpAdd8:
		return rewriteValueSPARC64_OpAdd8(v, config)
	case OpAddPtr:
		return rewriteValueSPARC64_OpAddPtr(v, config)
	case OpSub16:
		return rewriteValueSPARC64_OpSub16(v, config)
	case OpSub32:
		return rewriteValueSPARC64_OpSub32(v, config)
	case OpSub32F:
		return rewriteValueSPARC64_OpSub32F(v, config)
	case OpSub64:
		return rewriteValueSPARC64_OpSub64(v, config)
	case OpSub64F:
		return rewriteValueSPARC64_OpSub64F(v, config)
	case OpSub8:
		return rewriteValueSPARC64_OpSub8(v, config)
	case OpSubPtr:
		return rewriteValueSPARC64_OpSubPtr(v, config)
	}
	return false
}
func rewriteValueSPARC64_OpAdd16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add16  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add32  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add32F x y)
	// cond:
	// result: (FADDS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FADDS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add64  x y)
	// cond:
	// result: (ADD  x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add64F x y)
	// cond:
	// result: (FADDD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FADDD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add8   x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAddPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (AddPtr x y)
	// cond:
	// result: (ADD  x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub16 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub32 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub32F x y)
	// cond:
	// result: (FSUBS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FSUBS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub64 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub64F x y)
	// cond:
	// result: (FSUBD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FSUBD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub8 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSubPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SubPtr x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteBlockSPARC64(b *Block, config *Config) bool {
	switch b.Kind {
	}
	return false
}
