// autogenerated from gen/SPARC64.rules: do not edit!
// generated with: cd gen; go run *.go

package ssa

import "math"

var _ = math.MinInt8 // in case not otherwise used
func rewriteValueSPARC64(v *Value, config *Config) bool {
	switch v.Op {
	case OpAdd16:
		return rewriteValueSPARC64_OpAdd16(v, config)
	case OpAdd32:
		return rewriteValueSPARC64_OpAdd32(v, config)
	case OpAdd32F:
		return rewriteValueSPARC64_OpAdd32F(v, config)
	case OpAdd64:
		return rewriteValueSPARC64_OpAdd64(v, config)
	case OpAdd64F:
		return rewriteValueSPARC64_OpAdd64F(v, config)
	case OpAdd8:
		return rewriteValueSPARC64_OpAdd8(v, config)
	case OpAddPtr:
		return rewriteValueSPARC64_OpAddPtr(v, config)
	case OpDiv16:
		return rewriteValueSPARC64_OpDiv16(v, config)
	case OpDiv16u:
		return rewriteValueSPARC64_OpDiv16u(v, config)
	case OpDiv32:
		return rewriteValueSPARC64_OpDiv32(v, config)
	case OpDiv32F:
		return rewriteValueSPARC64_OpDiv32F(v, config)
	case OpDiv32u:
		return rewriteValueSPARC64_OpDiv32u(v, config)
	case OpDiv64:
		return rewriteValueSPARC64_OpDiv64(v, config)
	case OpDiv64F:
		return rewriteValueSPARC64_OpDiv64F(v, config)
	case OpDiv64u:
		return rewriteValueSPARC64_OpDiv64u(v, config)
	case OpDiv8:
		return rewriteValueSPARC64_OpDiv8(v, config)
	case OpDiv8u:
		return rewriteValueSPARC64_OpDiv8u(v, config)
	case OpMul16:
		return rewriteValueSPARC64_OpMul16(v, config)
	case OpMul32:
		return rewriteValueSPARC64_OpMul32(v, config)
	case OpMul32F:
		return rewriteValueSPARC64_OpMul32F(v, config)
	case OpMul64:
		return rewriteValueSPARC64_OpMul64(v, config)
	case OpMul64F:
		return rewriteValueSPARC64_OpMul64F(v, config)
	case OpMul8:
		return rewriteValueSPARC64_OpMul8(v, config)
	case OpSub16:
		return rewriteValueSPARC64_OpSub16(v, config)
	case OpSub32:
		return rewriteValueSPARC64_OpSub32(v, config)
	case OpSub32F:
		return rewriteValueSPARC64_OpSub32F(v, config)
	case OpSub64:
		return rewriteValueSPARC64_OpSub64(v, config)
	case OpSub64F:
		return rewriteValueSPARC64_OpSub64F(v, config)
	case OpSub8:
		return rewriteValueSPARC64_OpSub8(v, config)
	case OpSubPtr:
		return rewriteValueSPARC64_OpSubPtr(v, config)
	}
	return false
}
func rewriteValueSPARC64_OpAdd16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add16  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add32  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add32F x y)
	// cond:
	// result: (FADDS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FADDS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add64  x y)
	// cond:
	// result: (ADD  x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add64F x y)
	// cond:
	// result: (FADDD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FADDD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAdd8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Add8   x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpAddPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (AddPtr x y)
	// cond:
	// result: (ADD  x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div16 x y)
	// cond:
	// result: (SDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv16u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div16u x y)
	// cond:
	// result: (UDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div32 x y)
	// cond:
	// result: (SDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div32F x y)
	// cond:
	// result: (FDIVS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FDIVS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv32u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div32u x y)
	// cond:
	// result: (UDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div64 x y)
	// cond:
	// result: (SDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div64F x y)
	// cond:
	// result: (FDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv64u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div64u x y)
	// cond:
	// result: (UDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div8 x y)
	// cond:
	// result: (SDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpDiv8u(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Div8u x y)
	// cond:
	// result: (UDIVD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64UDIVD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul16 x y)
	// cond:
	// result: (MULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul32 x y)
	// cond:
	// result: (MULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul32F x y)
	// cond:
	// result: (FMULS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FMULS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul64 x y)
	// cond:
	// result: (MULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul64F x y)
	// cond:
	// result: (FMULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FMULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpMul8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Mul8 x y)
	// cond:
	// result: (MULD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64MULD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub16(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub16 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub32(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub32 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub32F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub32F x y)
	// cond:
	// result: (FSUBS x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FSUBS)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub64(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub64 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub64F(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub64F x y)
	// cond:
	// result: (FSUBD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64FSUBD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSub8(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (Sub8 x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteValueSPARC64_OpSubPtr(v *Value, config *Config) bool {
	b := v.Block
	_ = b
	// match: (SubPtr x y)
	// cond:
	// result: (SUB x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpSPARC64SUB)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
}
func rewriteBlockSPARC64(b *Block, config *Config) bool {
	switch b.Kind {
	}
	return false
}
