RTOBJS=runtime.u data.u
RT=pkg/solaris_sparc64/runtime.a
LD=`go env GOTOOLDIR`/link
ALTROOT=`go env GOROOT`/alt

EXES=empty.u.out hello.u.out call.u.out virtreg.u.out call1.6.out
GOS=call0.7.go.s
GNUS=${EXES:%.u.out=%.u.gnu.S}
DATS=${EXES:%.u.out=%.u.dat}

all:V: $EXES $GNUS $GOS $DATS

tools:V:
	go install -v cmd/asm cmd/compile cmd/link cmd/pack

pkg/solaris_sparc64:
	rm -rf pkg
	mkdir -p pkg/solaris_sparc64

%.u: tools 

%.u: %.s
	GOOS=solaris GOARCH=sparc64 go tool asm -o $target $stem.s

%.6: tools

%.6: %.go
	GOOS=darwin GOARCH=amd64 go tool compile -o $target $stem.go

%.6: %.s
	GOOS=darwin GOARCH=amd64 go tool asm -o $target $stem.s

$RT: pkg/solaris_sparc64 $RTOBJS
	go tool pack c $target $RTOBJS

%.7.go.s: tools %.go
	GOOS=linux GOARCH=arm64 go tool compile -S -o /dev/null $stem.go >$target

call1.6.a: call1.6 call1_amd64.6
	go tool pack c $target $prereq

%.6.out: %.6.a
	GOOS=darwin GOARCH=amd64 go tool link -o $target $prereq

%.u.out: %.u $RT
	GOROOT=$ALTROOT GOOS=solaris GOARCH=sparc64 $LD -w -o $target $stem.u

%.u.gnu.S: %.u.out
	sparc64-none-elf-objdump -d $prereq >$target

%.u.dat: %.u.out
	sparc64-none-elf-readelf -x .data -x .rodata -x .noptrdata $prereq >$target

copy:V: $EXES
	rsync -i $EXES torside:~/x

clean:V:
	rm -rf pkg *.[a56789uo] *.gnu.S *.go.s *.out *.dat
